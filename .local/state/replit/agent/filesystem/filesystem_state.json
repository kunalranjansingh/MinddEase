{"file_contents":{"design_guidelines.md":{"content":"# MindEase Youth Mental Wellness Website - Design Guidelines\n\n## Design Approach: Reference-Based with Social Media Inspiration\nDrawing from successful mental health and wellness platforms like Headspace, Calm, and modern healthcare apps, with social platform usability patterns for the community features.\n\n## Core Design Principles\n- **Calming & Trustworthy**: Soft, approachable aesthetics that reduce anxiety\n- **Accessible**: High contrast, clear typography, intuitive navigation\n- **Youth-Focused**: Modern, engaging without being childish\n- **Multilingual First**: Clean design that adapts to different text lengths\n\n## Color Palette\n**Light Mode:**\n- Primary: 210 45% 25% (Deep calming blue)\n- Secondary: 150 30% 45% (Soft sage green)\n- Background: 210 15% 98% (Warm off-white)\n- Text: 210 20% 15% (Dark blue-gray)\n\n**Dark Mode:**\n- Primary: 210 40% 70% (Lighter blue)\n- Secondary: 150 25% 65% (Muted green)\n- Background: 210 25% 8% (Deep blue-black)\n- Text: 210 10% 92% (Light blue-gray)\n\n## Typography\n- **Primary Font**: Inter (Google Fonts) - clean, readable, multilingual support\n- **Secondary Font**: Nunito (Google Fonts) - friendly, approachable for headings\n- **Scale**: text-sm, text-base, text-lg, text-xl, text-2xl, text-3xl\n\n## Layout System\n**Spacing Primitives**: 2, 4, 6, 8, 12, 16 units (p-2, m-4, gap-6, etc.)\n- Generous whitespace for breathing room\n- Consistent 16-unit container padding\n- 6-8 unit component spacing\n\n## Component Library\n\n### Navigation\n- Sticky header with language switcher (flag icons + dropdown)\n- Hamburger menu for mobile with smooth slide-out\n- Breadcrumb navigation for resources section\n\n### Hero Section\n- Large, calming gradient background (210 45% 25% to 150 30% 45%)\n- Centered content with generous padding\n- CTA buttons with variant=\"outline\" and blurred backgrounds over hero\n\n### Cards & Content\n- Rounded corners (rounded-lg to rounded-xl)\n- Subtle shadows for depth\n- Hover states with gentle scale transforms\n- Resource cards with category color coding\n\n### Forms\n- Rounded input fields with soft borders\n- Focus states with primary color outlines\n- Error states in warm red (0 65% 55%)\n- Success states in secondary green\n\n### Community Features\n- Avatar circles for user profiles\n- Chat bubbles with different styling for users/moderators\n- Reaction buttons with emoji support\n- Progress indicators for challenges\n\n## Key Sections Structure\n1. **Hero**: Welcome message, language switcher, main CTA\n2. **Quick Access**: Crisis resources, chat now, find resources\n3. **Features Grid**: Self-assessment, resources, community, challenges\n4. **Testimonials**: User success stories\n5. **Footer**: Support links, crisis hotlines, social media\n\n## Images\n- **Hero Background**: Abstract, calming geometric patterns or soft nature imagery\n- **Feature Icons**: Custom illustrations in primary/secondary colors\n- **Resource Thumbnails**: Category-based imagery (books, videos, articles)\n- **Avatar Placeholders**: Diverse, inclusive default avatars\n- **No large hero image** - focus on gradient backgrounds and illustrations\n\n## Accessibility Features\n- High contrast ratios (4.5:1 minimum)\n- Focus indicators on all interactive elements\n- Screen reader-friendly labels\n- Keyboard navigation support\n- Crisis resources always accessible via persistent button\n\n## Responsive Behavior\n- Mobile-first approach\n- Collapsible navigation\n- Stacked layouts on small screens\n- Touch-friendly button sizes (minimum 44px)\n- Adaptive text sizing for different languages\n\nThis design creates a safe, welcoming digital space that prioritizes user wellbeing while maintaining professional credibility and multilingual accessibility.","size_bytes":3676},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();","size_bytes":2065},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // API routes can be added here as needed\n  \n  const httpServer = createServer(app);\n\n  return httpServer;\n}","size_bytes":271},"server/storage.ts":{"content":"// Storage interface and implementation\n// Add CRUD methods as needed for your application\n\nexport interface IStorage {\n  // Storage methods can be added here as needed\n}\n\nexport class MemStorage implements IStorage {\n  constructor() {\n    // Initialize storage as needed\n  }\n}\n\nexport const storage = new MemStorage();","size_bytes":319},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Database schemas can be added here as needed","size_bytes":220},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"./components/AppSidebar\";\nimport { ThemeProvider, useTheme } from \"./components/ThemeProvider\";\nimport { TranslationProvider } from \"./contexts/TranslationContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Moon, Sun } from \"lucide-react\";\nimport SOSButton from \"./components/SOSButton\";\nimport WelcomePage from \"./components/WelcomePage\";\nimport HomePage from \"./components/HomePage\";\nimport DashboardPage from \"./components/DashboardPage\";\nimport ProfilePage from \"./components/ProfilePage\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n  \n  return (\n    <Button\n      onClick={toggleTheme}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-testid=\"button-theme-toggle\"\n      className=\"hover-elevate\"\n    >\n      {theme === \"dark\" ? (\n        <Sun className=\"h-5 w-5\" />\n      ) : (\n        <Moon className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={WelcomePage} />\n      <Route path=\"/mindease\" component={DashboardPage} />\n      <Route path=\"/home\" component={HomePage} />\n      <Route path=\"/dashboard\" component={DashboardPage} />\n      <Route path=\"/profile\" component={ProfilePage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction MainApp() {\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <SidebarProvider style={style as React.CSSProperties}>\n        <div className=\"flex h-screen w-full\">\n          <AppSidebar />\n          <div className=\"flex flex-col flex-1\">\n            <header className=\"flex items-center justify-between p-4 border-b bg-background/95 backdrop-blur\">\n              <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n              <div className=\"flex items-center gap-2\">\n                <ThemeToggle />\n              </div>\n            </header>\n            <main className=\"flex-1 overflow-auto\">\n              <Router />\n            </main>\n          </div>\n        </div>\n      </SidebarProvider>\n      <SOSButton />\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <ThemeProvider>\n          <TranslationProvider>\n            <MainApp />\n            <Toaster />\n          </TranslationProvider>\n        </ThemeProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}","size_bytes":2872},"client/src/index.css":{"content":"/* Google Fonts for proper typography */\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap');\n/* Hindi font support - Noto Sans Devanagari for proper Hindi rendering */\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Devanagari:wght@100..900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 210 15% 98%;\n  --foreground: 210 20% 15%;\n  --border: 210 12% 88%;\n  --card: 210 15% 96%;\n  --card-foreground: 210 20% 15%;\n  --card-border: 210 12% 86%;\n  --sidebar: 210 15% 94%;\n  --sidebar-foreground: 210 20% 15%;\n  --sidebar-border: 210 12% 84%;\n  --sidebar-primary: 210 45% 25%;\n  --sidebar-primary-foreground: 210 15% 95%;\n  --sidebar-accent: 210 15% 92%;\n  --sidebar-accent-foreground: 210 20% 15%;\n  --sidebar-ring: 210 45% 25%;\n  --popover: 210 15% 92%;\n  --popover-foreground: 210 20% 15%;\n  --popover-border: 210 12% 82%;\n  --primary: 210 45% 25%;\n  --primary-foreground: 210 15% 95%;\n  --secondary: 210 15% 90%;\n  --secondary-foreground: 210 20% 15%;\n  --muted: 210 12% 89%;\n  --muted-foreground: 210 15% 45%;\n  --accent: 150 20% 88%;\n  --accent-foreground: 150 25% 25%;\n  --destructive: 0 65% 55%;\n  --destructive-foreground: 0 10% 95%;\n  --input: 210 15% 75%;\n  --ring: 210 45% 25%;\n  --chart-1: 210 45% 25%;\n  --chart-2: 150 30% 45%;\n  --chart-3: 260 35% 35%;\n  --chart-4: 30 45% 35%;\n  --chart-5: 190 40% 30%;\n\n  --font-sans: Inter, 'Noto Sans Devanagari', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(210 15% 50% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(210 15% 50% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(210 15% 50% / 0.00), 0px 1px 2px -1px hsl(210 15% 50% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(210 15% 50% / 0.00), 0px 1px 2px -1px hsl(210 15% 50% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(210 15% 50% / 0.00), 0px 2px 4px -1px hsl(210 15% 50% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(210 15% 50% / 0.00), 0px 4px 6px -1px hsl(210 15% 50% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(210 15% 50% / 0.00), 0px 8px 10px -1px hsl(210 15% 50% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210 15% 50% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 210 25% 8%;\n  --foreground: 210 10% 92%;\n  --border: 210 20% 18%;\n  --card: 210 25% 10%;\n  --card-foreground: 210 10% 92%;\n  --card-border: 210 20% 20%;\n  --sidebar: 210 25% 12%;\n  --sidebar-foreground: 210 10% 92%;\n  --sidebar-border: 210 20% 22%;\n  --sidebar-primary: 210 40% 70%;\n  --sidebar-primary-foreground: 210 25% 8%;\n  --sidebar-accent: 210 25% 14%;\n  --sidebar-accent-foreground: 210 10% 92%;\n  --sidebar-ring: 210 40% 70%;\n  --popover: 210 25% 14%;\n  --popover-foreground: 210 10% 92%;\n  --popover-border: 210 20% 24%;\n  --primary: 210 40% 70%;\n  --primary-foreground: 210 25% 8%;\n  --secondary: 210 25% 16%;\n  --secondary-foreground: 210 10% 92%;\n  --muted: 210 20% 15%;\n  --muted-foreground: 210 15% 65%;\n  --accent: 150 15% 18%;\n  --accent-foreground: 150 20% 85%;\n  --destructive: 0 65% 55%;\n  --destructive-foreground: 0 10% 95%;\n  --input: 210 20% 25%;\n  --ring: 210 40% 70%;\n  --chart-1: 210 40% 75%;\n  --chart-2: 150 25% 65%;\n  --chart-3: 260 30% 65%;\n  --chart-4: 30 40% 65%;\n  --chart-5: 190 35% 70%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(210 25% 5% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(210 25% 5% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(210 25% 5% / 0.00), 0px 1px 2px -1px hsl(210 25% 5% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(210 25% 5% / 0.00), 0px 1px 2px -1px hsl(210 25% 5% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(210 25% 5% / 0.00), 0px 2px 4px -1px hsl(210 25% 5% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(210 25% 5% / 0.00), 0px 4px 6px -1px hsl(210 25% 5% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(210 25% 5% / 0.00), 0px 8px 10px -1px hsl(210 25% 5% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210 25% 5% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10135},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Achievements.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Trophy, Star, Heart, Moon, MessageCircle, Target, Palette, Calendar } from \"lucide-react\";\nimport { getUsageStats, type UsageStats as AppUsageStats } from \"@/lib/usage\";\n\ninterface Achievement {\n  id: string;\n  title: string;\n  description: string;\n  icon: string;\n  earned: boolean;\n  progress: number;\n  maxProgress: number;\n  category: \"dreams\" | \"chat\" | \"wellness\" | \"gratitude\" | \"consistency\" | \"sandbox\" | \"diary\" | \"sos\";\n  earnedDate?: Date;\n}\n\nexport default function Achievements() {\n  // Real usage statistics from the centralized usage tracker\n  const [usageStats, setUsageStats] = useState<AppUsageStats>(getUsageStats);\n\n  // Refresh stats from localStorage when component mounts or becomes visible\n  useEffect(() => {\n    const refreshStats = () => {\n      setUsageStats(getUsageStats());\n    };\n    \n    // Refresh on focus to catch updates from other components\n    window.addEventListener('focus', refreshStats);\n    \n    // Refresh periodically to catch updates from localStorage\n    const interval = setInterval(refreshStats, 2000);\n    \n    return () => {\n      window.removeEventListener('focus', refreshStats);\n      clearInterval(interval);\n    };\n  }, []);\n\n  // Generate achievements based on real usage data\n  const achievements: Achievement[] = [\n    // 💬 Chat-based achievements\n    {\n      id: \"first-chat\",\n      title: \"First Conversation\",\n      description: \"Sent your first message to the AI chatbox\",\n      icon: \"💬\",\n      earned: usageStats.chatMessages >= 1,\n      progress: Math.min(usageStats.chatMessages, 1),\n      maxProgress: 1,\n      category: \"chat\",\n      earnedDate: usageStats.chatMessages >= 1 ? new Date() : undefined\n    },\n    {\n      id: \"honest-heart\",\n      title: \"Honest Heart\",\n      description: \"Shared feelings in chatbox 10 times\",\n      icon: \"💙\",\n      earned: usageStats.chatMessages >= 10,\n      progress: Math.min(usageStats.chatMessages, 10),\n      maxProgress: 10,\n      category: \"chat\",\n      earnedDate: usageStats.chatMessages >= 10 ? new Date() : undefined\n    },\n    {\n      id: \"chat-champion\",\n      title: \"Chat Champion\",\n      description: \"Sent 50 messages in the AI chatbox\",\n      icon: \"🏆\",\n      earned: usageStats.chatMessages >= 50,\n      progress: Math.min(usageStats.chatMessages, 50),\n      maxProgress: 50,\n      category: \"chat\"\n    },\n\n    // 🌙 Dream journal achievements\n    {\n      id: \"dream-starter\",\n      title: \"Dream Starter\",\n      description: \"Logged your first dream\",\n      icon: \"🌙\",\n      earned: usageStats.dreamEntries >= 1,\n      progress: Math.min(usageStats.dreamEntries, 1),\n      maxProgress: 1,\n      category: \"dreams\",\n      earnedDate: usageStats.dreamEntries >= 1 ? new Date() : undefined\n    },\n    {\n      id: \"dream-explorer\",\n      title: \"Dream Explorer\",\n      description: \"Logged 5 dreams in your dream journal\",\n      icon: \"✨\",\n      earned: usageStats.dreamEntries >= 5,\n      progress: Math.min(usageStats.dreamEntries, 5),\n      maxProgress: 5,\n      category: \"dreams\",\n      earnedDate: usageStats.dreamEntries >= 5 ? new Date() : undefined\n    },\n    {\n      id: \"night-storyteller\",\n      title: \"Night Storyteller\",\n      description: \"Recorded 20 dreams and transformed them\",\n      icon: \"🔮\",\n      earned: usageStats.dreamEntries >= 20,\n      progress: Math.min(usageStats.dreamEntries, 20),\n      maxProgress: 20,\n      category: \"dreams\"\n    },\n\n    // 🎨 Emotion sandbox achievements\n    {\n      id: \"first-creation\",\n      title: \"First Creation\",\n      description: \"Created your first artwork in emotion sandbox\",\n      icon: \"🎨\",\n      earned: usageStats.sandboxCreations >= 1,\n      progress: Math.min(usageStats.sandboxCreations, 1),\n      maxProgress: 1,\n      category: \"sandbox\",\n      earnedDate: usageStats.sandboxCreations >= 1 ? new Date() : undefined\n    },\n    {\n      id: \"emotion-artist\",\n      title: \"Emotion Artist\",\n      description: \"Created 10 art pieces in emotion sandbox\",\n      icon: \"🌈\",\n      earned: usageStats.sandboxCreations >= 10,\n      progress: Math.min(usageStats.sandboxCreations, 10),\n      maxProgress: 10,\n      category: \"sandbox\",\n      earnedDate: usageStats.sandboxCreations >= 10 ? new Date() : undefined\n    },\n    {\n      id: \"creative-master\",\n      title: \"Creative Master\",\n      description: \"Created 30 emotional artworks\",\n      icon: \"🎭\",\n      earned: usageStats.sandboxCreations >= 30,\n      progress: Math.min(usageStats.sandboxCreations, 30),\n      maxProgress: 30,\n      category: \"sandbox\"\n    },\n\n    // ✨ Gratitude achievements\n    {\n      id: \"gratitude-starter\",\n      title: \"Gratitude Starter\",\n      description: \"Added your first gratitude note\",\n      icon: \"✨\",\n      earned: usageStats.gratitudeNotes >= 1,\n      progress: Math.min(usageStats.gratitudeNotes, 1),\n      maxProgress: 1,\n      category: \"gratitude\",\n      earnedDate: usageStats.gratitudeNotes >= 1 ? new Date() : undefined\n    },\n    {\n      id: \"gratitude-collector\",\n      title: \"Gratitude Collector\",\n      description: \"Added 20 notes to your gratitude jar\",\n      icon: \"🫙\",\n      earned: usageStats.gratitudeNotes >= 20,\n      progress: Math.min(usageStats.gratitudeNotes, 20),\n      maxProgress: 20,\n      category: \"gratitude\",\n      earnedDate: usageStats.gratitudeNotes >= 20 ? new Date() : undefined\n    },\n    {\n      id: \"thankful-soul\",\n      title: \"Thankful Soul\",\n      description: \"Collected 50 gratitude moments\",\n      icon: \"🌟\",\n      earned: usageStats.gratitudeNotes >= 50,\n      progress: Math.min(usageStats.gratitudeNotes, 50),\n      maxProgress: 50,\n      category: \"gratitude\"\n    },\n\n    // 📊 Mood tracking achievements\n    {\n      id: \"mood-tracker\",\n      title: \"Mood Tracker\",\n      description: \"Logged your first mood entry\",\n      icon: \"📊\",\n      earned: usageStats.moodEntries >= 1,\n      progress: Math.min(usageStats.moodEntries, 1),\n      maxProgress: 1,\n      category: \"consistency\",\n      earnedDate: usageStats.moodEntries >= 1 ? new Date() : undefined\n    },\n    {\n      id: \"consistent-tracker\",\n      title: \"Consistent Tracker\",\n      description: \"Tracked your mood 15 times\",\n      icon: \"📈\",\n      earned: usageStats.moodEntries >= 15,\n      progress: Math.min(usageStats.moodEntries, 15),\n      maxProgress: 15,\n      category: \"consistency\",\n      earnedDate: usageStats.moodEntries >= 15 ? new Date() : undefined\n    },\n\n    // 🚨 SOS achievements\n    {\n      id: \"calm-mind\",\n      title: \"Calm Mind\",\n      description: \"Used SOS breathing exercises 5 times\",\n      icon: \"🌸\",\n      earned: usageStats.sosUses >= 5,\n      progress: Math.min(usageStats.sosUses, 5),\n      maxProgress: 5,\n      category: \"sos\",\n      earnedDate: usageStats.sosUses >= 5 ? new Date() : undefined\n    },\n    {\n      id: \"crisis-navigator\",\n      title: \"Crisis Navigator\",\n      description: \"Successfully used SOS support 15 times\",\n      icon: \"⚡\",\n      earned: usageStats.sosUses >= 15,\n      progress: Math.min(usageStats.sosUses, 15),\n      maxProgress: 15,\n      category: \"sos\"\n    },\n\n    // 📔 Personal diary achievements\n    {\n      id: \"diary-starter\",\n      title: \"Diary Starter\",\n      description: \"Wrote your first diary entry\",\n      icon: \"📔\",\n      earned: usageStats.diaryEntries >= 1,\n      progress: Math.min(usageStats.diaryEntries, 1),\n      maxProgress: 1,\n      category: \"diary\",\n      earnedDate: usageStats.diaryEntries >= 1 ? new Date() : undefined\n    },\n    {\n      id: \"thoughtful-writer\",\n      title: \"Thoughtful Writer\",\n      description: \"Wrote 10 personal diary entries\",\n      icon: \"✍️\",\n      earned: usageStats.diaryEntries >= 10,\n      progress: Math.min(usageStats.diaryEntries, 10),\n      maxProgress: 10,\n      category: \"diary\",\n      earnedDate: usageStats.diaryEntries >= 10 ? new Date() : undefined\n    },\n\n    // 🎯 Consistency achievements\n    {\n      id: \"active-week\",\n      title: \"Active Week\",\n      description: \"Used MindEase for 7 days\",\n      icon: \"🎯\",\n      earned: usageStats.daysActive >= 7,\n      progress: Math.min(usageStats.daysActive, 7),\n      maxProgress: 7,\n      category: \"consistency\",\n      earnedDate: usageStats.daysActive >= 7 ? new Date() : undefined\n    },\n    {\n      id: \"milestone-warrior\",\n      title: \"Milestone Warrior\",\n      description: \"Reached 30 days on MindEase\",\n      icon: \"🏆\",\n      earned: usageStats.daysActive >= 30,\n      progress: Math.min(usageStats.daysActive, 30),\n      maxProgress: 30,\n      category: \"consistency\"\n    },\n    {\n      id: \"wellness-champion\",\n      title: \"Wellness Champion\",\n      description: \"Used all 7 MindEase features\",\n      icon: \"🌟\",\n      earned: (usageStats.chatMessages >= 1 && usageStats.dreamEntries >= 1 && \n               usageStats.sandboxCreations >= 1 && usageStats.gratitudeNotes >= 1 && \n               usageStats.moodEntries >= 1 && usageStats.sosUses >= 1 && \n               usageStats.diaryEntries >= 1),\n      progress: [usageStats.chatMessages >= 1, usageStats.dreamEntries >= 1, \n                usageStats.sandboxCreations >= 1, usageStats.gratitudeNotes >= 1,\n                usageStats.moodEntries >= 1, usageStats.sosUses >= 1, \n                usageStats.diaryEntries >= 1].filter(Boolean).length,\n      maxProgress: 7,\n      category: \"wellness\"\n    }\n  ];\n\n  const earnedAchievements = achievements.filter(a => a.earned);\n  const inProgressAchievements = achievements.filter(a => !a.earned);\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case \"dreams\": return <Moon className=\"h-4 w-4\" />;\n      case \"chat\": return <MessageCircle className=\"h-4 w-4\" />;\n      case \"wellness\": return <Heart className=\"h-4 w-4\" />;\n      case \"gratitude\": return <Star className=\"h-4 w-4\" />;\n      case \"consistency\": return <Target className=\"h-4 w-4\" />;\n      case \"sandbox\": return <Palette className=\"h-4 w-4\" />;\n      case \"diary\": return <Calendar className=\"h-4 w-4\" />;\n      case \"sos\": return <Heart className=\"h-4 w-4\" />;\n      default: return <Trophy className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case \"dreams\": return \"purple\";\n      case \"chat\": return \"blue\";\n      case \"wellness\": return \"green\";\n      case \"gratitude\": return \"yellow\";\n      case \"consistency\": return \"orange\";\n      case \"sandbox\": return \"pink\";\n      case \"diary\": return \"teal\";\n      case \"sos\": return \"red\";\n      default: return \"gray\";\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <div className=\"flex items-center justify-center gap-2\">\n          <Trophy className=\"h-8 w-8 text-yellow-600\" />\n          <h2 className=\"text-2xl font-bold text-primary\">🏅 Achievements & Badges</h2>\n        </div>\n        <p className=\"text-muted-foreground\">\n          Celebrate your progress and milestones on your wellness journey ✨\n        </p>\n        \n        {/* Live Usage Statistics */}\n        <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">📊 Your MindEase Usage Statistics</CardTitle>\n            <CardDescription>Real-time tracking of your wellness journey</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n              <div>\n                <div className=\"text-2xl font-bold text-blue-600\">{usageStats.chatMessages}</div>\n                <div className=\"text-xs text-muted-foreground\">💬 Chat Messages</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-purple-600\">{usageStats.dreamEntries}</div>\n                <div className=\"text-xs text-muted-foreground\">🌙 Dreams Logged</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-pink-600\">{usageStats.sandboxCreations}</div>\n                <div className=\"text-xs text-muted-foreground\">🎨 Art Creations</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-yellow-600\">{usageStats.gratitudeNotes}</div>\n                <div className=\"text-xs text-muted-foreground\">✨ Gratitude Notes</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-green-600\">{usageStats.moodEntries}</div>\n                <div className=\"text-xs text-muted-foreground\">📊 Mood Entries</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-red-600\">{usageStats.sosUses}</div>\n                <div className=\"text-xs text-muted-foreground\">🚨 SOS Uses</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-teal-600\">{usageStats.diaryEntries}</div>\n                <div className=\"text-xs text-muted-foreground\">📔 Diary Entries</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-orange-600\">{usageStats.daysActive}</div>\n                <div className=\"text-xs text-muted-foreground\">📅 Active Days</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-3 gap-4\">\n        <Card className=\"text-center\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-3xl font-bold text-green-600\">{earnedAchievements.length}</div>\n            <div className=\"text-sm text-muted-foreground\">Badges Earned</div>\n          </CardContent>\n        </Card>\n        <Card className=\"text-center\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-3xl font-bold text-blue-600\">{inProgressAchievements.length}</div>\n            <div className=\"text-sm text-muted-foreground\">In Progress</div>\n          </CardContent>\n        </Card>\n        <Card className=\"text-center\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-3xl font-bold text-purple-600\">\n              {Math.round((earnedAchievements.length / achievements.length) * 100)}%\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Completion</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Earned Achievements */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Trophy className=\"h-5 w-5 text-yellow-600\" />\n            Earned Badges ({earnedAchievements.length})\n          </CardTitle>\n          <CardDescription>\n            Congratulations on these amazing achievements!\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {earnedAchievements.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Trophy className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>Your first badge is waiting to be earned!</p>\n              <p className=\"text-sm mt-2\">Keep using MindEase features to unlock achievements.</p>\n            </div>\n          ) : (\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              {earnedAchievements.map((achievement) => (\n                <Card \n                  key={achievement.id} \n                  className=\"border-green-200 bg-green-50 dark:bg-green-950/20 hover-elevate\"\n                  data-testid={`achievement-earned-${achievement.id}`}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start gap-3\">\n                      <span className=\"text-3xl\">{achievement.icon}</span>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <h3 className=\"font-semibold text-green-800 dark:text-green-200\">\n                            {achievement.title}\n                          </h3>\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {getCategoryIcon(achievement.category)}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-green-700 dark:text-green-300 mb-2\">\n                          {achievement.description}\n                        </p>\n                        <p className=\"text-xs text-green-600 dark:text-green-400\">\n                          Earned {achievement.earnedDate?.toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* In Progress Achievements */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Target className=\"h-5 w-5 text-blue-600\" />\n            In Progress ({inProgressAchievements.length})\n          </CardTitle>\n          <CardDescription>\n            Keep going! You're on your way to earning these badges.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {inProgressAchievements.map((achievement) => (\n              <Card \n                key={achievement.id} \n                className=\"border-blue-200 dark:border-blue-800\"\n                data-testid={`achievement-progress-${achievement.id}`}\n              >\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start gap-3\">\n                    <span className=\"text-3xl opacity-60\">{achievement.icon}</span>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <h3 className=\"font-semibold\">{achievement.title}</h3>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {getCategoryIcon(achievement.category)}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        {achievement.description}\n                      </p>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Progress</span>\n                          <span className=\"font-medium\">\n                            {achievement.progress}/{achievement.maxProgress}\n                          </span>\n                        </div>\n                        <Progress \n                          value={(achievement.progress / achievement.maxProgress) * 100} \n                          className=\"h-2\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Motivation */}\n      <Card className=\"border-primary/20 bg-gradient-to-r from-primary/5 to-accent/5\">\n        <CardContent className=\"p-6 text-center\">\n          <h3 className=\"font-semibold text-primary mb-2\">Keep Going! 🌟</h3>\n          <p className=\"text-muted-foreground\">\n            Every step you take on your wellness journey is worth celebrating. \n            You're doing amazing work by prioritizing your mental health!\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":19861},"client/src/components/AppSidebar.tsx":{"content":"import { Home, LayoutDashboard, User, Heart } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n} from \"@/components/ui/sidebar\";\n\nconst menuItems = [\n  {\n    title: \"Home\",\n    url: \"/home\",\n    icon: Home,\n  },\n  {\n    title: \"Dashboard\",\n    url: \"/dashboard\", \n    icon: LayoutDashboard,\n  },\n  {\n    title: \"Profile\",\n    url: \"/profile\",\n    icon: User,\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-6\">\n        <Link to=\"/\" className=\"flex items-center gap-2 text-sidebar-primary\">\n          <Heart className=\"h-8 w-8\" />\n          <span className=\"text-2xl font-bold\">MindEase</span>\n        </Link>\n      </SidebarHeader>\n      \n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton \n                    asChild\n                    isActive={location === item.url}\n                    data-testid={`nav-${item.title.toLowerCase()}`}\n                  >\n                    <Link to={item.url}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}","size_bytes":1770},"client/src/components/BreathingExercise.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Play, Pause, RotateCcw } from \"lucide-react\";\n\nexport default function BreathingExercise() {\n  const [isActive, setIsActive] = useState(false);\n  const [phase, setPhase] = useState<\"inhale\" | \"hold\" | \"exhale\">(\"inhale\");\n  const [timer, setTimer] = useState(4);\n  const [cycle, setCycle] = useState(0);\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n\n    if (isActive && timer > 0) {\n      interval = setInterval(() => {\n        setTimer((prev) => prev - 1);\n      }, 1000);\n    } else if (isActive && timer === 0) {\n      // Move to next phase\n      if (phase === \"inhale\") {\n        setPhase(\"hold\");\n        setTimer(4);\n      } else if (phase === \"hold\") {\n        setPhase(\"exhale\");\n        setTimer(4);\n      } else {\n        setPhase(\"inhale\");\n        setTimer(4);\n        setCycle((prev) => prev + 1);\n      }\n    }\n\n    return () => clearInterval(interval);\n  }, [isActive, timer, phase]);\n\n  const handleStart = () => {\n    setIsActive(!isActive);\n    console.log(`Breathing exercise ${isActive ? \"paused\" : \"started\"}`);\n  };\n\n  const handleReset = () => {\n    setIsActive(false);\n    setPhase(\"inhale\");\n    setTimer(4);\n    setCycle(0);\n    console.log(\"Breathing exercise reset\");\n  };\n\n  const getInstructions = () => {\n    switch (phase) {\n      case \"inhale\":\n        return \"Breathe in slowly...\";\n      case \"hold\":\n        return \"Hold your breath...\";\n      case \"exhale\":\n        return \"Breathe out slowly...\";\n    }\n  };\n\n  const getCircleScale = () => {\n    const progress = (4 - timer) / 4;\n    if (phase === \"inhale\") {\n      return 0.5 + (progress * 0.5); // Expand from 0.5 to 1\n    } else if (phase === \"exhale\") {\n      return 1 - (progress * 0.5); // Shrink from 1 to 0.5\n    }\n    return 1; // Hold phase\n  };\n\n  return (\n    <div className=\"text-center space-y-4\">\n      <div className=\"relative w-32 h-32 mx-auto\">\n        <div\n          className=\"w-full h-full rounded-full bg-primary/20 border-2 border-primary transition-transform duration-1000 ease-in-out flex items-center justify-center\"\n          style={{\n            transform: `scale(${getCircleScale()})`,\n          }}\n        >\n          <div className=\"text-2xl font-bold text-primary\">{timer}</div>\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <p className=\"text-lg font-medium\">{getInstructions()}</p>\n        <p className=\"text-sm text-muted-foreground\">Cycle: {cycle}</p>\n      </div>\n\n      <div className=\"flex gap-2 justify-center\">\n        <Button\n          onClick={handleStart}\n          data-testid=\"button-breathing-toggle\"\n          variant=\"default\"\n          size=\"sm\"\n        >\n          {isActive ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n          {isActive ? \"Pause\" : \"Start\"}\n        </Button>\n        <Button\n          onClick={handleReset}\n          data-testid=\"button-breathing-reset\"\n          variant=\"outline\"\n          size=\"sm\"\n        >\n          <RotateCcw className=\"h-4 w-4\" />\n          Reset\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":3136},"client/src/components/ChatBox.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Send, Heart, Loader2 } from \"lucide-react\";\nimport { useTranslation } from \"../contexts/TranslationContext\";\nimport { trackChatMessage } from \"@/lib/usage\";\n\ninterface Message {\n  id: string;\n  text: string;\n  sender: \"user\" | \"ai\";\n  timestamp: Date;\n}\n\nexport default function ChatBox() {\n  const { t } = useTranslation();\n  \n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: \"1\",\n      text: t.chatbox.initialMessage,\n      sender: \"ai\",\n      timestamp: new Date()\n    }\n  ]);\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const sendMessage = async () => {\n    if (!currentMessage.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      text: currentMessage.trim(),\n      sender: \"user\",\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setCurrentMessage(\"\");\n    setIsLoading(true);\n    \n    // Track usage for achievements\n    trackChatMessage();\n\n    // Simulate AI response (in real app, this would call OpenAI API)\n    setTimeout(() => {\n      const aiResponses = t.chatbox.aiResponses;\n\n      const randomResponse = aiResponses[Math.floor(Math.random() * aiResponses.length)];\n\n      const aiMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        text: randomResponse,\n        sender: \"ai\",\n        timestamp: new Date()\n      };\n\n      setMessages(prev => [...prev, aiMessage]);\n      setIsLoading(false);\n    }, 1500);\n\n    console.log(\"Message sent:\", currentMessage);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-[600px] max-w-2xl mx-auto relative\">\n      {/* Animated Background */}\n      <div className=\"absolute inset-0 overflow-hidden rounded-lg\">\n        <div className=\"chatbox-bg\">\n          <div className=\"floating-hearts\">\n            {[...Array(8)].map((_, i) => (\n              <div\n                key={i}\n                className=\"floating-heart\"\n                style={{\n                  left: `${Math.random() * 100}%`,\n                  top: `${Math.random() * 100}%`,\n                  animationDelay: `${Math.random() * 4}s`,\n                  animationDuration: `${4 + Math.random() * 2}s`,\n                }}\n              >\n                <Heart className=\"h-4 w-4 text-blue-500\" />\n              </div>\n            ))}\n          </div>\n          <div className=\"chat-bubbles\">\n            {[...Array(6)].map((_, i) => (\n              <div\n                key={i}\n                className=\"chat-bubble\"\n                style={{\n                  left: `${Math.random() * 100}%`,\n                  top: `${Math.random() * 100}%`,\n                  animationDelay: `${Math.random() * 6}s`,\n                }}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n      \n      <Card className=\"flex-1 flex flex-col relative z-10 bg-background/90 backdrop-blur-sm border border-primary/20\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2 text-primary\">\n            <Heart className=\"h-5 w-5\" />\n            {t.chatbox.title}\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            {t.chatbox.description}\n          </p>\n        </CardHeader>\n        \n        <CardContent className=\"flex-1 flex flex-col min-h-0\">\n          <ScrollArea className=\"flex-1 pr-3\">\n            <div className=\"space-y-4\">\n              {messages.map((message) => (\n                <div\n                  key={message.id}\n                  className={`flex ${message.sender === \"user\" ? \"justify-end\" : \"justify-start\"}`}\n                  data-testid={`message-${message.sender}-${message.id}`}\n                >\n                  <div\n                    className={`max-w-[80%] p-3 rounded-lg ${\n                      message.sender === \"user\"\n                        ? \"bg-primary text-primary-foreground\"\n                        : \"bg-muted text-muted-foreground\"\n                    }`}\n                  >\n                    <p className=\"text-sm leading-relaxed\">{message.text}</p>\n                    <span className=\"text-xs opacity-70 mt-1 block\">\n                      {message.timestamp.toLocaleTimeString([], { \n                        hour: '2-digit', \n                        minute: '2-digit' \n                      })}\n                    </span>\n                  </div>\n                </div>\n              ))}\n              \n              {isLoading && (\n                <div className=\"flex justify-start\">\n                  <div className=\"bg-muted text-muted-foreground p-3 rounded-lg flex items-center gap-2\">\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    <span className=\"text-sm\">{t.chatbox.typing}</span>\n                  </div>\n                </div>\n              )}\n            </div>\n          </ScrollArea>\n          \n          <div className=\"flex gap-2 mt-4\">\n            <Input\n              value={currentMessage}\n              onChange={(e) => setCurrentMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder={t.chatbox.placeholder}\n              disabled={isLoading}\n              data-testid=\"input-chat-message\"\n              className=\"flex-1\"\n            />\n            <Button\n              onClick={sendMessage}\n              disabled={!currentMessage.trim() || isLoading}\n              data-testid=\"button-send-message\"\n              size=\"icon\"\n              className=\"hover-elevate\"\n            >\n              <Send className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n      \n      {/* Animated Background Styles */}\n      <style>{`\n        .chatbox-bg {\n          position: absolute;\n          inset: 0;\n          background: linear-gradient(135deg, \n            rgba(139, 92, 246, 0.1) 0%, \n            rgba(59, 130, 246, 0.1) 50%, \n            rgba(168, 85, 247, 0.1) 100%);\n          overflow: hidden;\n        }\n        \n        .floating-hearts {\n          position: absolute;\n          inset: 0;\n        }\n        \n        .floating-heart {\n          position: absolute;\n          font-size: 1.2rem;\n          animation: floatHeart infinite ease-in-out;\n          pointer-events: none;\n          opacity: 0.6;\n        }\n        \n        @keyframes floatHeart {\n          0%, 100% {\n            transform: translateY(0) rotate(0deg);\n            opacity: 0.3;\n          }\n          50% {\n            transform: translateY(-20px) rotate(5deg);\n            opacity: 0.8;\n          }\n        }\n        \n        .chat-bubbles {\n          position: absolute;\n          inset: 0;\n        }\n        \n        .chat-bubble {\n          position: absolute;\n          width: 30px;\n          height: 20px;\n          background: rgba(139, 92, 246, 0.2);\n          border-radius: 15px 15px 15px 5px;\n          animation: bubbleFloat 8s infinite ease-in-out;\n          pointer-events: none;\n        }\n        \n        @keyframes bubbleFloat {\n          0%, 100% {\n            transform: translateY(0) scale(0.8);\n            opacity: 0.3;\n          }\n          50% {\n            transform: translateY(-30px) scale(1.1);\n            opacity: 0.6;\n          }\n        }\n      `}</style>\n    </div>\n  );\n}","size_bytes":7712},"client/src/components/DashboardPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { MessageCircle, Palette, Moon, ArrowRight } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport ChatBox from \"./ChatBox\";\nimport EmotionSandbox from \"./EmotionSandbox\";\nimport DreamJournal from \"./DreamJournal\";\n\nexport default function DashboardPage() {\n  const [activeFeature, setActiveFeature] = useState<string | null>(null);\n\n  const features = [\n    {\n      id: \"chatbox\",\n      title: \"AI Chatbox\",\n      description: \"Share your feelings and get gentle, empathetic responses\",\n      icon: MessageCircle,\n      color: \"primary\",\n      background: \"bg-gradient-to-br from-primary/10 to-primary/20\",\n      component: ChatBox\n    },\n    {\n      id: \"sandbox\", \n      title: \"Emotion Sandbox\",\n      description: \"Turn your emotions into calming art, music, and stories\",\n      icon: Palette,\n      color: \"accent\",\n      background: \"bg-gradient-to-br from-accent/10 to-accent/20\",\n      component: EmotionSandbox\n    },\n    {\n      id: \"dreamcatcher\",\n      title: \"Dream Journal\",\n      description: \"Transform your dreams into hopeful stories and affirmations\",\n      icon: Moon,\n      color: \"chart-3\",\n      background: \"bg-gradient-to-br from-purple-100 to-purple-200 dark:from-purple-900/20 dark:to-purple-800/20\",\n      component: DreamJournal\n    }\n  ];\n\n  const openFeature = (featureId: string) => {\n    setActiveFeature(featureId);\n    console.log(`Opened ${featureId} feature`);\n  };\n\n  const activeFeatureData = features.find(f => f.id === activeFeature);\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-3xl md:text-4xl font-bold text-foreground\">\n          Your Wellness Dashboard\n        </h1>\n        <p className=\"text-lg text-muted-foreground\">\n          Choose a tool to support your mental wellness journey\n        </p>\n      </div>\n\n      {/* Feature Cards */}\n      <div className=\"grid md:grid-cols-3 gap-6\">\n        {features.map((feature) => {\n          const IconComponent = feature.icon;\n          return (\n            <Card \n              key={feature.id}\n              className={`${feature.background} border-2 border-transparent hover:border-${feature.color}/30 transition-all duration-300 hover-elevate cursor-pointer group`}\n              onClick={() => openFeature(feature.id)}\n              data-testid={`card-feature-${feature.id}`}\n            >\n              <CardHeader className=\"text-center pb-4\">\n                <div className=\"flex justify-center mb-4\">\n                  <div className={`p-4 rounded-full bg-${feature.color}/10 group-hover:bg-${feature.color}/20 transition-colors`}>\n                    <IconComponent className={`h-12 w-12 text-${feature.color}`} />\n                  </div>\n                </div>\n                <CardTitle className={`text-xl text-${feature.color}`}>\n                  {feature.title}\n                </CardTitle>\n                <CardDescription className=\"text-center\">\n                  {feature.description}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <Button \n                  className=\"w-full group-hover:scale-105 transition-transform\"\n                  variant=\"outline\"\n                  data-testid={`button-open-${feature.id}`}\n                >\n                  Open {feature.title}\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Quick Actions */}\n      <Card className=\"border-muted\">\n        <CardHeader>\n          <CardTitle className=\"text-center\">Quick Access</CardTitle>\n          <CardDescription className=\"text-center\">\n            Jump into any wellness activity instantly\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap justify-center gap-3\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => openFeature(\"chatbox\")}\n              data-testid=\"button-quick-chat\"\n              className=\"hover-elevate\"\n            >\n              <MessageCircle className=\"h-4 w-4 mr-2\" />\n              Quick Chat\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => openFeature(\"sandbox\")}\n              data-testid=\"button-quick-create\"\n              className=\"hover-elevate\"\n            >\n              <Palette className=\"h-4 w-4 mr-2\" />\n              Create Art\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => openFeature(\"dreamcatcher\")}\n              data-testid=\"button-quick-dream\"\n              className=\"hover-elevate\"\n            >\n              <Moon className=\"h-4 w-4 mr-2\" />\n              Record Dream\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Feature Dialog */}\n      <Dialog open={!!activeFeature} onOpenChange={() => setActiveFeature(null)}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          {activeFeatureData && (\n            <>\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center gap-3\">\n                  <activeFeatureData.icon className={`h-6 w-6 text-${activeFeatureData.color}`} />\n                  {activeFeatureData.title}\n                </DialogTitle>\n              </DialogHeader>\n              <div className=\"mt-4\">\n                <activeFeatureData.component />\n              </div>\n            </>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":5960},"client/src/components/DreamJournal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Moon, Sparkles, Heart, Loader2, Stars } from \"lucide-react\";\nimport { trackDreamEntry } from \"@/lib/usage\";\n\ninterface DreamEntry {\n  id: string;\n  originalDream: string;\n  reframedDream: string;\n  affirmations: string[];\n  timestamp: Date;\n}\n\nexport default function DreamJournal() {\n  const [currentDream, setCurrentDream] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [dreamEntries, setDreamEntries] = useState<DreamEntry[]>([]);\n\n  const processDream = async () => {\n    if (!currentDream.trim()) return;\n\n    setIsProcessing(true);\n\n    // Simulate AI dream processing (in real app, this would call OpenAI API)\n    setTimeout(() => {\n      const mockReframedDream = currentDream.toLowerCase().includes(\"drowning\")\n        ? \"In your dream, you discovered your incredible ability to transform. What felt like drowning became your metamorphosis into a graceful dolphin. You swam freely through crystal-clear waters, moving with confidence and joy. This dream shows your inner strength to adapt and thrive in any situation.\"\n        : \"Your dream has been transformed into a beautiful story of growth and resilience. Every challenge you faced in the dream became a stepping stone to discovering your inner strength and wisdom.\";\n\n      const mockAffirmations = [\n        \"I am capable of transforming challenges into opportunities\",\n        \"I trust in my ability to navigate difficult emotions\",\n        \"I am strong, resilient, and worthy of peace\",\n        \"My dreams guide me toward healing and growth\",\n        \"I embrace change as a path to my authentic self\"\n      ];\n\n      const newEntry: DreamEntry = {\n        id: Date.now().toString(),\n        originalDream: currentDream,\n        reframedDream: mockReframedDream,\n        affirmations: mockAffirmations,\n        timestamp: new Date()\n      };\n\n      setDreamEntries(prev => [newEntry, ...prev]);\n      setCurrentDream(\"\");\n      setIsProcessing(false);\n      \n      // Track usage for achievements\n      trackDreamEntry();\n    }, 2500);\n\n    console.log(\"Processing dream:\", currentDream);\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6 relative\">\n      {/* Animated Background */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"dream-bg\">\n          <div className=\"floating-moons\">\n            {[...Array(6)].map((_, i) => (\n              <div\n                key={i}\n                className=\"floating-moon\"\n                style={{\n                  left: `${Math.random() * 100}%`,\n                  top: `${Math.random() * 100}%`,\n                  animationDelay: `${Math.random() * 6}s`,\n                  animationDuration: `${8 + Math.random() * 4}s`,\n                }}\n              >\n                {['🌙', '✨', '⭐', '🌟', '💫', '🔮'][i]}\n              </div>\n            ))}\n          </div>\n          <div className=\"dream-clouds\">\n            {[...Array(10)].map((_, i) => (\n              <div\n                key={i}\n                className=\"dream-cloud\"\n                style={{\n                  left: `${Math.random() * 100}%`,\n                  top: `${Math.random() * 100}%`,\n                  animationDelay: `${Math.random() * 12}s`,\n                }}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n      \n      {/* Input Section */}\n      <Card className=\"bg-gradient-to-r from-purple-100/80 to-blue-100/80 dark:from-purple-950/40 dark:to-blue-950/40 backdrop-blur-sm border border-purple-300 dark:border-purple-700 relative z-10\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-purple-700 dark:text-purple-300\">\n            <Moon className=\"h-5 w-5\" />\n            🌙 Dream Journal (DreamCatcher) - Transform Your Sleep Stories\n          </CardTitle>\n          <CardDescription>\n            ✨ Share your dreams and watch them transform into positive stories and affirmations. Even nightmares become beautiful tales of growth.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Textarea\n            value={currentDream}\n            onChange={(e) => setCurrentDream(e.target.value)}\n            placeholder=\"Describe your dream... even if it was scary or confusing, share it here and I'll help transform it into something beautiful.\"\n            disabled={isProcessing}\n            data-testid=\"textarea-dream\"\n            className=\"min-h-[120px] resize-none\"\n          />\n          <Button\n            onClick={processDream}\n            disabled={!currentDream.trim() || isProcessing}\n            data-testid=\"button-process-dream\"\n            className=\"w-full hover-elevate\"\n          >\n            {isProcessing ? (\n              <>\n                <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                Transforming your dream...\n              </>\n            ) : (\n              <>\n                <Sparkles className=\"h-4 w-4 mr-2\" />\n                Transform My Dream\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Processing State */}\n      {isProcessing && (\n        <Card className=\"border-purple-200 dark:border-purple-800\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"space-y-4\">\n              <div className=\"relative\">\n                <Moon className=\"h-16 w-16 text-purple-500 mx-auto animate-pulse\" />\n                <Stars className=\"h-6 w-6 text-yellow-400 absolute -top-1 -right-1 animate-spin\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-purple-700 dark:text-purple-300\">\n                Weaving magic into your dream...\n              </h3>\n              <p className=\"text-muted-foreground\">\n                AI is creating a beautiful, hopeful transformation of your dream\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Dream Entries */}\n      {dreamEntries.map((entry) => (\n        <Card key={entry.id} className=\"border-purple-200 dark:border-purple-800\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <Moon className=\"h-4 w-4\" />\n              Dream from {entry.timestamp.toLocaleDateString()}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Reframed Dream */}\n            <div className=\"space-y-3\">\n              <h3 className=\"font-semibold text-purple-700 dark:text-purple-300 flex items-center gap-2\">\n                <Sparkles className=\"h-4 w-4\" />\n                Your Transformed Dream\n              </h3>\n              <p className=\"text-muted-foreground leading-relaxed bg-purple-50 dark:bg-purple-950/20 p-4 rounded-lg\">\n                {entry.reframedDream}\n              </p>\n            </div>\n\n            {/* Affirmations */}\n            <div className=\"space-y-3\">\n              <h3 className=\"font-semibold text-purple-700 dark:text-purple-300 flex items-center gap-2\">\n                <Heart className=\"h-4 w-4\" />\n                Personal Affirmations\n              </h3>\n              <div className=\"grid gap-2\">\n                {entry.affirmations.map((affirmation, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center gap-3 p-3 bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-950/20 dark:to-blue-950/20 rounded-lg\"\n                    data-testid={`affirmation-${index}`}\n                  >\n                    <span className=\"text-purple-500\">✨</span>\n                    <span className=\"text-sm text-muted-foreground\">{affirmation}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex gap-2 pt-4 border-t border-purple-200 dark:border-purple-800\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => console.log(\"Dream entry saved to journal\")}\n                data-testid=\"button-save-dream\"\n                className=\"hover-elevate\"\n              >\n                Save to Journal\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => console.log(\"Dream affirmations saved\")}\n                data-testid=\"button-save-affirmations\"\n                className=\"hover-elevate\"\n              >\n                Save Affirmations\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n\n      {/* Bedtime Tips */}\n      {dreamEntries.length === 0 && !isProcessing && (\n        <Card className=\"border-blue-200 dark:border-blue-800 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20\">\n          <CardHeader>\n            <CardTitle className=\"text-blue-700 dark:text-blue-300\">\n              Sweet Dreams Tips 🌙\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2 text-sm text-muted-foreground\">\n              <p>• Keep a dream journal by your bed to capture dreams while they're fresh</p>\n              <p>• Remember: all dreams, even scary ones, can teach us something valuable</p>\n              <p>• Try visualization before sleep - imagine peaceful, positive scenarios</p>\n              <p>• Your subconscious mind is working to help you process and grow</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      \n      {/* Animated Background Styles */}\n      <style>{`\n        .dream-bg {\n          position: absolute;\n          inset: 0;\n          background: radial-gradient(ellipse at top, \n            rgba(59, 130, 246, 0.1) 0%, \n            rgba(139, 92, 246, 0.1) 40%, \n            rgba(168, 85, 247, 0.1) 70%, \n            rgba(30, 41, 59, 0.1) 100%);\n          overflow: hidden;\n        }\n        \n        .floating-moons {\n          position: absolute;\n          inset: 0;\n        }\n        \n        .floating-moon {\n          position: absolute;\n          font-size: 1.8rem;\n          animation: floatDream infinite ease-in-out;\n          pointer-events: none;\n          opacity: 0.8;\n        }\n        \n        @keyframes floatDream {\n          0%, 100% {\n            transform: translateY(0) rotate(0deg) scale(1);\n            opacity: 0.5;\n          }\n          50% {\n            transform: translateY(-25px) rotate(10deg) scale(1.2);\n            opacity: 0.9;\n          }\n        }\n        \n        .dream-clouds {\n          position: absolute;\n          inset: 0;\n        }\n        \n        .dream-cloud {\n          position: absolute;\n          width: 60px;\n          height: 30px;\n          background: rgba(255, 255, 255, 0.2);\n          border-radius: 50px;\n          position: relative;\n          animation: cloudDrift 15s infinite linear;\n          pointer-events: none;\n        }\n        \n        .dream-cloud::before {\n          content: '';\n          position: absolute;\n          top: -15px;\n          left: 10px;\n          width: 30px;\n          height: 30px;\n          background: rgba(255, 255, 255, 0.2);\n          border-radius: 50%;\n        }\n        \n        .dream-cloud::after {\n          content: '';\n          position: absolute;\n          top: -10px;\n          right: 15px;\n          width: 20px;\n          height: 20px;\n          background: rgba(255, 255, 255, 0.2);\n          border-radius: 50%;\n        }\n        \n        @keyframes cloudDrift {\n          0% {\n            transform: translateX(-100px) translateY(0);\n            opacity: 0;\n          }\n          10%, 90% {\n            opacity: 0.3;\n          }\n          100% {\n            transform: translateX(calc(100vw + 100px)) translateY(-50px);\n            opacity: 0;\n          }\n        }\n      `}</style>\n    </div>\n  );\n}","size_bytes":12165},"client/src/components/EmotionSandbox.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Palette, Music, BookOpen, Sparkles, Loader2 } from \"lucide-react\";\nimport { trackSandboxCreation } from \"@/lib/usage\";\n\ninterface CreatedContent {\n  type: \"art\" | \"story\" | \"music\" | \"tip\";\n  content: string;\n  title: string;\n}\n\nexport default function EmotionSandbox() {\n  const [emotion, setEmotion] = useState(\"\");\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [createdContent, setCreatedContent] = useState<CreatedContent[]>([]);\n\n  const generateContent = async () => {\n    if (!emotion.trim()) return;\n\n    setIsGenerating(true);\n    \n    // Simulate AI content generation (in real app, this would call OpenAI API)\n    setTimeout(() => {\n      const mockContent: CreatedContent[] = [\n        {\n          type: \"art\",\n          title: \"Calming Moonscape\",\n          content: \"🌙 A serene night scene with soft blue and silver tones. The moon gently illuminates calm waters, surrounded by peaceful stars that twinkle like hope.\"\n        },\n        {\n          type: \"story\",\n          title: \"A Journey to Inner Peace\",\n          content: \"Once upon a time, there was a young person who felt overwhelming emotions. They discovered that like waves in the ocean, feelings come and go. By breathing deeply and focusing on the present moment, they found their inner calm...\"\n        },\n        {\n          type: \"music\",\n          title: \"Gentle Rain Melody\",\n          content: \"🎵 Soft piano notes like raindrops... Dm - F - C - G... A gentle rhythm that matches your heartbeat when you're finding peace.\"\n        },\n        {\n          type: \"tip\",\n          title: \"Wellness Tip\",\n          content: \"When emotions feel overwhelming, try the 4-7-8 breathing technique: Inhale for 4 counts, hold for 7, exhale for 8. This activates your body's relaxation response.\"\n        }\n      ];\n\n      setCreatedContent(mockContent);\n      setIsGenerating(false);\n      \n      // Track usage for achievements\n      trackSandboxCreation();\n    }, 2000);\n\n    console.log(\"Generating content for emotion:\", emotion);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      generateContent();\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6 relative\">\n      {/* Animated Background */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"sandbox-bg\">\n          <div className=\"floating-shapes\">\n            {[...Array(12)].map((_, i) => (\n              <div\n                key={i}\n                className=\"floating-shape\"\n                style={{\n                  left: `${Math.random() * 100}%`,\n                  top: `${Math.random() * 100}%`,\n                  animationDelay: `${Math.random() * 8}s`,\n                  animationDuration: `${6 + Math.random() * 4}s`,\n                }}\n              >\n                {['🎨', '✨', '🌈', '🎭', '🎪', '🌸'][Math.floor(Math.random() * 6)]}\n              </div>\n            ))}\n          </div>\n          <div className=\"art-patterns\">\n            {[...Array(8)].map((_, i) => (\n              <div\n                key={i}\n                className=\"art-pattern\"\n                style={{\n                  left: `${Math.random() * 100}%`,\n                  top: `${Math.random() * 100}%`,\n                  animationDelay: `${Math.random() * 10}s`,\n                }}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n      \n      {/* Input Section */}\n      <Card className=\"bg-gradient-to-r from-accent/10 to-primary/10 backdrop-blur-sm border border-accent/30 relative z-10\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-accent\">\n            <Palette className=\"h-5 w-5\" />\n            🎨 Emotion Sandbox - Creative Expression Therapy\n          </CardTitle>\n          <CardDescription>\n            ✨ Transform your feelings into beautiful, calming creations. Turn any emotion into art, music, stories, and wellness tips.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-3\">\n            <Input\n              value={emotion}\n              onChange={(e) => setEmotion(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"I feel... (e.g., lonely, anxious, overwhelmed, excited)\"\n              disabled={isGenerating}\n              data-testid=\"input-emotion\"\n              className=\"flex-1\"\n            />\n            <Button\n              onClick={generateContent}\n              disabled={!emotion.trim() || isGenerating}\n              data-testid=\"button-generate-content\"\n              className=\"hover-elevate\"\n            >\n              {isGenerating ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Creating...\n                </>\n              ) : (\n                <>\n                  <Sparkles className=\"h-4 w-4 mr-2\" />\n                  Create\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Loading State */}\n      {isGenerating && (\n        <Card className=\"border-primary/20\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"space-y-4\">\n              <Loader2 className=\"h-12 w-12 animate-spin text-primary mx-auto\" />\n              <h3 className=\"text-lg font-semibold\">Creating your personalized content...</h3>\n              <p className=\"text-muted-foreground\">\n                AI is transforming \"{emotion}\" into calming art, stories, and wellness tips\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Generated Content */}\n      {createdContent.length > 0 && !isGenerating && (\n        <Tabs defaultValue=\"art\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"art\" data-testid=\"tab-art\">\n              <Palette className=\"h-4 w-4 mr-1\" />\n              Art\n            </TabsTrigger>\n            <TabsTrigger value=\"story\" data-testid=\"tab-story\">\n              <BookOpen className=\"h-4 w-4 mr-1\" />\n              Story\n            </TabsTrigger>\n            <TabsTrigger value=\"music\" data-testid=\"tab-music\">\n              <Music className=\"h-4 w-4 mr-1\" />\n              Music\n            </TabsTrigger>\n            <TabsTrigger value=\"tip\" data-testid=\"tab-tip\">\n              <Sparkles className=\"h-4 w-4 mr-1\" />\n              Tip\n            </TabsTrigger>\n          </TabsList>\n\n          {createdContent.map((content) => (\n            <TabsContent key={content.type} value={content.type}>\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    {content.type === \"art\" && <Palette className=\"h-5 w-5 text-accent\" />}\n                    {content.type === \"story\" && <BookOpen className=\"h-5 w-5 text-primary\" />}\n                    {content.type === \"music\" && <Music className=\"h-5 w-5 text-chart-3\" />}\n                    {content.type === \"tip\" && <Sparkles className=\"h-5 w-5 text-chart-4\" />}\n                    {content.title}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground leading-relaxed whitespace-pre-line\">\n                    {content.content}\n                  </p>\n                  <div className=\"mt-4 flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => console.log(`Saved ${content.type}: ${content.title}`)}\n                      data-testid={`button-save-${content.type}`}\n                      className=\"hover-elevate\"\n                    >\n                      Save to Journal\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => console.log(`Shared ${content.type}: ${content.title}`)}\n                      data-testid={`button-share-${content.type}`}\n                      className=\"hover-elevate\"\n                    >\n                      Share\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          ))}\n        </Tabs>\n      )}\n\n      {/* Example Prompts */}\n      {createdContent.length === 0 && !isGenerating && (\n        <Card className=\"border-muted\">\n          <CardHeader>\n            <CardTitle className=\"text-sm\">Try these example emotions:</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-wrap gap-2\">\n              {[\"lonely\", \"anxious\", \"excited\", \"overwhelmed\", \"peaceful\", \"frustrated\"].map((example) => (\n                <Button\n                  key={example}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setEmotion(example)}\n                  data-testid={`button-example-${example}`}\n                  className=\"hover-elevate\"\n                >\n                  {example}\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      \n      {/* Animated Background Styles */}\n      <style>{`\n        .sandbox-bg {\n          position: absolute;\n          inset: 0;\n          background: radial-gradient(circle at 20% 80%, \n            rgba(168, 85, 247, 0.1) 0%, \n            rgba(59, 130, 246, 0.1) 30%, \n            rgba(16, 185, 129, 0.1) 60%, \n            rgba(245, 158, 11, 0.1) 100%);\n          overflow: hidden;\n        }\n        \n        .floating-shapes {\n          position: absolute;\n          inset: 0;\n        }\n        \n        .floating-shape {\n          position: absolute;\n          font-size: 1.5rem;\n          animation: floatArt infinite ease-in-out;\n          pointer-events: none;\n          opacity: 0.7;\n        }\n        \n        @keyframes floatArt {\n          0%, 100% {\n            transform: translateY(0) rotate(0deg) scale(1);\n            opacity: 0.4;\n          }\n          33% {\n            transform: translateY(-15px) rotate(120deg) scale(1.1);\n            opacity: 0.8;\n          }\n          66% {\n            transform: translateY(-10px) rotate(240deg) scale(0.9);\n            opacity: 0.6;\n          }\n        }\n        \n        .art-patterns {\n          position: absolute;\n          inset: 0;\n        }\n        \n        .art-pattern {\n          position: absolute;\n          width: 40px;\n          height: 40px;\n          background: linear-gradient(45deg, \n            rgba(168, 85, 247, 0.3) 0%, \n            rgba(59, 130, 246, 0.3) 50%, \n            rgba(16, 185, 129, 0.3) 100%);\n          border-radius: 50% 20% 50% 20%;\n          animation: patternDance 12s infinite ease-in-out;\n          pointer-events: none;\n        }\n        \n        @keyframes patternDance {\n          0%, 100% {\n            transform: scale(0.5) rotate(0deg);\n            opacity: 0.2;\n          }\n          25% {\n            transform: scale(1.2) rotate(90deg);\n            opacity: 0.5;\n          }\n          50% {\n            transform: scale(0.8) rotate(180deg);\n            opacity: 0.3;\n          }\n          75% {\n            transform: scale(1.1) rotate(270deg);\n            opacity: 0.6;\n          }\n        }\n      `}</style>\n    </div>\n  );\n}","size_bytes":11751},"client/src/components/GratitudeJar.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Plus, Heart, Sparkles } from \"lucide-react\";\n\ninterface GratitudeNote {\n  id: string;\n  text: string;\n  date: Date;\n  color: string;\n}\n\nconst noteColors = [\n  \"bg-yellow-100 dark:bg-yellow-900/20 border-yellow-300 dark:border-yellow-700\",\n  \"bg-pink-100 dark:bg-pink-900/20 border-pink-300 dark:border-pink-700\",\n  \"bg-blue-100 dark:bg-blue-900/20 border-blue-300 dark:border-blue-700\",\n  \"bg-green-100 dark:bg-green-900/20 border-green-300 dark:border-green-700\",\n  \"bg-purple-100 dark:bg-purple-900/20 border-purple-300 dark:border-purple-700\",\n];\n\nexport default function GratitudeJar() {\n  const [currentNote, setCurrentNote] = useState(\"\");\n  const [notes, setNotes] = useState<GratitudeNote[]>([\n    // TODO: remove mock data\n    {\n      id: \"1\",\n      text: \"Had a really good conversation with my friend today\",\n      date: new Date(Date.now() - 24 * 60 * 60 * 1000),\n      color: noteColors[0]\n    },\n    {\n      id: \"2\", \n      text: \"Found a new song that made me feel peaceful\",\n      date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n      color: noteColors[1]\n    },\n    {\n      id: \"3\",\n      text: \"My pet made me smile when I was feeling down\",\n      date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),\n      color: noteColors[2]\n    }\n  ]);\n\n  const addGratitudeNote = () => {\n    if (!currentNote.trim()) return;\n\n    const newNote: GratitudeNote = {\n      id: Date.now().toString(),\n      text: currentNote.trim(),\n      date: new Date(),\n      color: noteColors[Math.floor(Math.random() * noteColors.length)]\n    };\n\n    setNotes(prev => [newNote, ...prev]);\n    setCurrentNote(\"\");\n    console.log(\"Added gratitude note:\", newNote.text);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      addGratitudeNote();\n    }\n  };\n\n  const getWeeklyCollage = () => {\n    const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n    const weeklyNotes = notes.filter(note => note.date >= weekAgo);\n    \n    if (weeklyNotes.length >= 5) {\n      return (\n        <Card className=\"border-gold bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-950/20 dark:to-orange-950/20\">\n          <CardContent className=\"p-4 text-center\">\n            <Sparkles className=\"h-8 w-8 text-yellow-600 mx-auto mb-2\" />\n            <h3 className=\"font-semibold text-yellow-800 dark:text-yellow-200 mb-2\">\n              Weekly Gratitude Collage! ✨\n            </h3>\n            <p className=\"text-sm text-yellow-700 dark:text-yellow-300\">\n              Amazing! You've collected {weeklyNotes.length} moments of gratitude this week.\n              Your jar is glowing with positivity!\n            </p>\n          </CardContent>\n        </Card>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto space-y-6\">\n      {/* Header */}\n      <div className=\"text-center space-y-2\">\n        <div className=\"text-6xl mb-4\">🫙</div>\n        <h2 className=\"text-2xl font-bold text-primary\">Your Gratitude Jar</h2>\n        <p className=\"text-muted-foreground\">\n          Drop one good thing from your day into your virtual jar\n        </p>\n      </div>\n\n      {/* Add New Note */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">What made you smile today?</CardTitle>\n          <CardDescription>\n            Even small moments count - a kind word, a beautiful sunset, or a good meal\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-3\">\n            <Input\n              value={currentNote}\n              onChange={(e) => setCurrentNote(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"I'm grateful for...\"\n              data-testid=\"input-gratitude\"\n              className=\"flex-1\"\n            />\n            <Button\n              onClick={addGratitudeNote}\n              disabled={!currentNote.trim()}\n              data-testid=\"button-add-gratitude\"\n              className=\"hover-elevate\"\n            >\n              <Plus className=\"h-4 w-4 mr-1\" />\n              Add\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Weekly Collage */}\n      {getWeeklyCollage()}\n\n      {/* Gratitude Notes */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Heart className=\"h-5 w-5 text-destructive\" />\n            Your Gratitude Collection ({notes.length} notes)\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ScrollArea className=\"h-[400px] pr-4\">\n            <div className=\"space-y-3\">\n              {notes.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <div className=\"text-4xl mb-4\">✨</div>\n                  <p>Your gratitude jar is waiting for its first note!</p>\n                  <p className=\"text-sm mt-2\">Start by adding something you're grateful for today.</p>\n                </div>\n              ) : (\n                notes.map((note) => (\n                  <div\n                    key={note.id}\n                    className={`p-4 rounded-lg border-2 ${note.color} transform hover:scale-105 transition-transform cursor-pointer`}\n                    data-testid={`gratitude-note-${note.id}`}\n                  >\n                    <p className=\"text-sm font-medium text-foreground mb-2\">\n                      {note.text}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {note.date.toLocaleDateString()} • {note.date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                    </p>\n                  </div>\n                ))\n              )}\n            </div>\n          </ScrollArea>\n        </CardContent>\n      </Card>\n\n      {/* Gratitude Tips */}\n      <Card className=\"border-muted\">\n        <CardHeader>\n          <CardTitle className=\"text-sm\">Gratitude Tips 💡</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-1 text-sm text-muted-foreground\">\n            <p>• Try to add at least one note per day</p>\n            <p>• Look for small moments: a smile, good weather, a tasty meal</p>\n            <p>• Review your jar when you're feeling down</p>\n            <p>• Gratitude gets easier with practice!</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6744},"client/src/components/GroundingGame.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { CheckCircle, Circle } from \"lucide-react\";\n\nconst steps = [\n  { count: 5, sense: \"see\", prompt: \"5 things you can see around you\" },\n  { count: 4, sense: \"touch\", prompt: \"4 things you can touch\" },\n  { count: 3, sense: \"hear\", prompt: \"3 things you can hear\" },\n  { count: 2, sense: \"smell\", prompt: \"2 things you can smell\" },\n  { count: 1, sense: \"taste\", prompt: \"1 thing you can taste\" },\n];\n\nexport default function GroundingGame() {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [answers, setAnswers] = useState<string[][]>(Array(5).fill([]).map(() => []));\n  const [isComplete, setIsComplete] = useState(false);\n\n  const addAnswer = (stepIndex: number, answer: string) => {\n    if (answer.trim()) {\n      const newAnswers = [...answers];\n      newAnswers[stepIndex] = [...newAnswers[stepIndex], answer.trim()];\n      setAnswers(newAnswers);\n      \n      // Move to next step if current step is complete\n      if (newAnswers[stepIndex].length === steps[stepIndex].count) {\n        if (stepIndex < steps.length - 1) {\n          setCurrentStep(stepIndex + 1);\n        } else {\n          setIsComplete(true);\n          console.log(\"Grounding exercise completed\");\n        }\n      }\n    }\n  };\n\n  const resetGame = () => {\n    setCurrentStep(0);\n    setAnswers(Array(5).fill([]).map(() => []));\n    setIsComplete(false);\n    console.log(\"Grounding game reset\");\n  };\n\n  const getCurrentInput = () => {\n    if (isComplete) return null;\n    \n    const step = steps[currentStep];\n    const currentAnswers = answers[currentStep];\n    \n    return (\n      <div className=\"space-y-2\">\n        <Input\n          placeholder={`Name ${step.count - currentAnswers.length} more...`}\n          onKeyPress={(e) => {\n            if (e.key === \"Enter\") {\n              addAnswer(currentStep, e.currentTarget.value);\n              e.currentTarget.value = \"\";\n            }\n          }}\n          data-testid={`input-grounding-${step.sense}`}\n        />\n        <div className=\"flex flex-wrap gap-1\">\n          {currentAnswers.map((answer, index) => (\n            <span\n              key={index}\n              className=\"px-2 py-1 bg-primary/10 text-primary rounded-md text-sm\"\n            >\n              {answer}\n            </span>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  if (isComplete) {\n    return (\n      <Card className=\"border-green-200 bg-green-50 dark:bg-green-950 dark:border-green-800\">\n        <CardContent className=\"p-4 text-center\">\n          <CheckCircle className=\"h-12 w-12 text-green-600 mx-auto mb-2\" />\n          <h3 className=\"font-semibold text-green-800 dark:text-green-200 mb-2\">\n            Great job! You're grounded.\n          </h3>\n          <p className=\"text-sm text-green-700 dark:text-green-300 mb-4\">\n            You've successfully completed the 5-4-3-2-1 grounding technique.\n          </p>\n          <Button\n            onClick={resetGame}\n            data-testid=\"button-grounding-restart\"\n            variant=\"outline\"\n            size=\"sm\"\n          >\n            Try Again\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <h3 className=\"font-semibold mb-2\">5-4-3-2-1 Grounding Technique</h3>\n        <p className=\"text-sm text-muted-foreground\">\n          This helps you focus on the present moment\n        </p>\n      </div>\n\n      <div className=\"space-y-3\">\n        {steps.map((step, index) => (\n          <div key={index} className=\"flex items-start gap-3\">\n            <div className=\"mt-1\">\n              {index < currentStep || (index === currentStep && answers[index].length === step.count) ? (\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              ) : index === currentStep ? (\n                <Circle className=\"h-5 w-5 text-primary\" />\n              ) : (\n                <Circle className=\"h-5 w-5 text-muted-foreground\" />\n              )}\n            </div>\n            <div className=\"flex-1\">\n              <p className={`font-medium ${index === currentStep ? \"text-primary\" : index < currentStep ? \"text-green-600\" : \"text-muted-foreground\"}`}>\n                {step.prompt}\n              </p>\n              {index === currentStep && getCurrentInput()}\n              {index < currentStep && answers[index].length > 0 && (\n                <div className=\"flex flex-wrap gap-1 mt-1\">\n                  {answers[index].map((answer, answerIndex) => (\n                    <span\n                      key={answerIndex}\n                      className=\"px-2 py-1 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 rounded-md text-sm\"\n                    >\n                      {answer}\n                    </span>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":5069},"client/src/components/GrowthTracker.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from \"recharts\";\nimport { TrendingUp, Calendar, Heart } from \"lucide-react\";\n\ninterface MoodEntry {\n  date: string;\n  mood: string;\n  intensity: number;\n  color: string;\n}\n\nconst moodOptions = [\n  { value: \"calm\", label: \"Calm 🌸\", color: \"#10b981\", intensity: 5 },\n  { value: \"happy\", label: \"Happy 😃\", color: \"#f59e0b\", intensity: 5 },\n  { value: \"excited\", label: \"Excited ✨\", color: \"#8b5cf6\", intensity: 4 },\n  { value: \"neutral\", label: \"Neutral 😐\", color: \"#6b7280\", intensity: 3 },\n  { value: \"anxious\", label: \"Anxious 😟\", color: \"#ef4444\", intensity: 2 },\n  { value: \"sad\", label: \"Sad 😢\", color: \"#3b82f6\", intensity: 2 },\n  { value: \"stressed\", label: \"Stressed 😤\", color: \"#dc2626\", intensity: 1 },\n];\n\nexport default function GrowthTracker() {\n  const [selectedMood, setSelectedMood] = useState(\"\");\n  \n  // TODO: remove mock data\n  const [moodData, setMoodData] = useState<MoodEntry[]>([\n    { date: \"Mon\", mood: \"calm\", intensity: 5, color: \"#10b981\" },\n    { date: \"Tue\", mood: \"calm\", intensity: 5, color: \"#10b981\" },\n    { date: \"Wed\", mood: \"happy\", intensity: 5, color: \"#f59e0b\" },\n    { date: \"Thu\", mood: \"calm\", intensity: 5, color: \"#10b981\" },\n    { date: \"Fri\", mood: \"stressed\", intensity: 1, color: \"#dc2626\" },\n    { date: \"Sat\", mood: \"happy\", intensity: 5, color: \"#f59e0b\" },\n    { date: \"Sun\", mood: \"stressed\", intensity: 1, color: \"#dc2626\" },\n  ]);\n\n  const addMoodEntry = () => {\n    if (!selectedMood) return;\n\n    const mood = moodOptions.find(m => m.value === selectedMood);\n    if (!mood) return;\n\n    const today = new Date().toLocaleDateString('en-US', { weekday: 'short' });\n    const newEntry: MoodEntry = {\n      date: today,\n      mood: mood.value,\n      intensity: mood.intensity,\n      color: mood.color\n    };\n\n    // Replace today's entry if it exists, otherwise add new\n    const updatedData = moodData.filter(entry => entry.date !== today);\n    setMoodData([...updatedData, newEntry]);\n    setSelectedMood(\"\");\n    \n    console.log(\"Added mood entry:\", newEntry);\n  };\n\n  const getMoodCounts = () => {\n    const counts = moodData.reduce((acc, entry) => {\n      acc[entry.mood] = (acc[entry.mood] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return Object.entries(counts).map(([mood, count]) => {\n      const moodOption = moodOptions.find(m => m.value === mood);\n      return {\n        name: moodOption?.label || mood,\n        value: count,\n        color: moodOption?.color || \"#6b7280\"\n      };\n    });\n  };\n\n  const getAIFeedback = () => {\n    const calmCount = moodData.filter(entry => entry.mood === \"calm\").length;\n    const happyCount = moodData.filter(entry => entry.mood === \"happy\").length;\n    const stressedCount = moodData.filter(entry => entry.mood === \"stressed\").length;\n\n    if (calmCount >= 3 && happyCount >= 2) {\n      return {\n        message: \"You are getting better at finding calm before exams. Your emotional balance is improving! 🌟\",\n        type: \"positive\"\n      };\n    } else if (stressedCount >= 3) {\n      return {\n        message: \"I notice you've been feeling stressed lately. Remember to use your breathing exercises and take breaks. You're doing great! 💜\",\n        type: \"supportive\"\n      };\n    } else {\n      return {\n        message: \"You're on a wonderful journey of self-awareness. Every day you track is a step toward better emotional health! ✨\",\n        type: \"encouraging\"\n      };\n    }\n  };\n\n  const aiCommunication = getAIFeedback();\n  const pieData = getMoodCounts();\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      {/* Add Mood Entry */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Heart className=\"h-5 w-5 text-destructive\" />\n            How are you feeling today?\n          </CardTitle>\n          <CardDescription>\n            Track your daily emotions to see patterns and growth over time\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-3\">\n            <Select value={selectedMood} onValueChange={setSelectedMood}>\n              <SelectTrigger className=\"flex-1\" data-testid=\"select-mood\">\n                <SelectValue placeholder=\"Select your current mood...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {moodOptions.map((mood) => (\n                  <SelectItem key={mood.value} value={mood.value}>\n                    {mood.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Button\n              onClick={addMoodEntry}\n              disabled={!selectedMood}\n              data-testid=\"button-add-mood\"\n              className=\"hover-elevate\"\n            >\n              <Calendar className=\"h-4 w-4 mr-1\" />\n              Track\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* AI Feedback */}\n      <Card className={`border-2 ${aiCommunication.type === 'positive' ? 'border-green-200 bg-green-50 dark:bg-green-950/20' : aiCommunication.type === 'supportive' ? 'border-blue-200 bg-blue-50 dark:bg-blue-950/20' : 'border-purple-200 bg-purple-50 dark:bg-purple-950/20'}`}>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-sm\">\n            <TrendingUp className=\"h-4 w-4\" />\n            AI Feedback & Insights\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground leading-relaxed\">\n            {aiCommunication.message}\n          </p>\n        </CardContent>\n      </Card>\n\n      {/* Charts Grid */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {/* Weekly Mood Chart */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">This Week's Mood Journey</CardTitle>\n            <CardDescription>\n              Your emotional patterns over the past 7 days\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <BarChart data={moodData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis domain={[0, 5]} />\n                <Tooltip \n                  formatter={(value, name, props) => [\n                    `Intensity: ${value}`,\n                    moodOptions.find(m => m.value === props.payload.mood)?.label || props.payload.mood\n                  ]}\n                />\n                <Bar dataKey=\"intensity\" fill=\"#8884d8\">\n                  {moodData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Bar>\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Mood Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Mood Distribution</CardTitle>\n            <CardDescription>\n              How often you've experienced each emotion\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <PieChart>\n                <Pie\n                  data={pieData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={80}\n                  dataKey=\"value\"\n                  label={({name, value}) => `${name}: ${value}`}\n                >\n                  {pieData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Stats Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Weekly Summary</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n            <div>\n              <div className=\"text-2xl font-bold text-green-600\">\n                {moodData.filter(entry => entry.mood === \"calm\").length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Calm Days 🌸</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-yellow-600\">\n                {moodData.filter(entry => entry.mood === \"happy\").length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Happy Days 😃</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-red-600\">\n                {moodData.filter(entry => entry.mood === \"stressed\").length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Stressed Days 😟</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {moodData.length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Total Tracked</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9586},"client/src/components/HomePage.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { MessageCircle, Palette, Moon, BarChart3, Target, Heart } from \"lucide-react\";\nimport { useTranslation } from \"../contexts/TranslationContext\";\n\nexport default function HomePage() {\n  const { t } = useTranslation();\n  \n  return (\n    <div className=\"space-y-8\">\n      {/* Hero Section */}\n      <div className=\"text-center space-y-6 py-12\">\n        <div className=\"relative\">\n          <h1 className=\"text-4xl md:text-5xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n            {t.home.title}\n          </h1>\n          <div className=\"absolute -inset-4 bg-gradient-to-r from-primary/10 to-accent/10 rounded-2xl blur-xl -z-10\" />\n        </div>\n        \n        <p className=\"text-xl md:text-2xl font-semibold text-primary\">\n          {t.home.tagline}\n        </p>\n      </div>\n\n      {/* About Section - Detailed Feature Descriptions */}\n      <Card className=\"border-primary/20 bg-gradient-to-br from-primary/5 to-accent/5\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl text-center\">🌟 Complete Feature Guide</CardTitle>\n          <CardDescription className=\"text-center text-lg\">\n            Every tool designed specifically to support your mental wellness journey\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          \n          {/* Core AI Features */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-xl font-semibold text-primary text-center\">{t.home.coreFeatures}</h3>\n            \n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div className=\"flex items-start gap-3 p-6 rounded-lg bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20 border border-blue-200 dark:border-blue-800\">\n                <MessageCircle className=\"h-8 w-8 text-primary mt-1 flex-shrink-0\" />\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-semibold text-primary text-lg\">{t.home.chatbox.title}</h4>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    <strong>{t.home.chatbox.whatItDoes}</strong> {t.home.chatbox.whatItDoesDesc}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    <strong>{t.home.chatbox.howItHelps}</strong> {t.home.chatbox.howItHelpsDesc}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    <strong>{t.home.chatbox.perfectFor}</strong> {t.home.chatbox.perfectForDesc}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-3 p-6 rounded-lg bg-gradient-to-r from-green-50 to-teal-50 dark:from-green-950/20 dark:to-teal-950/20 border border-green-200 dark:border-green-800\">\n                <Palette className=\"h-8 w-8 text-accent mt-1 flex-shrink-0\" />\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-semibold text-accent text-lg\">{t.home.emotionSandbox.title}</h4>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    <strong>{t.home.emotionSandbox.whatItDoes}</strong> {t.home.emotionSandbox.whatItDoesDesc}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    <strong>{t.home.emotionSandbox.howItHelps}</strong> {t.home.emotionSandbox.howItHelpsDesc}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    <strong>{t.home.emotionSandbox.perfectFor}</strong> {t.home.emotionSandbox.perfectForDesc}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-3 p-6 rounded-lg bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-950/20 dark:to-pink-950/20 border border-purple-200 dark:border-purple-800\">\n                <Moon className=\"h-8 w-8 text-chart-3 mt-1 flex-shrink-0\" />\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-semibold text-chart-3 text-lg\">🌙 Dream Journal - Transform Your Subconscious</h4>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    <strong>What it does:</strong> AI analyzes your dreams (even nightmares) and transforms them into positive, hopeful stories with personalized affirmations.\n                  </p>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    <strong>How it helps:</strong> Reduces anxiety from bad dreams, helps you understand subconscious thoughts, builds positive thinking patterns, and improves sleep quality.\n                  </p>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    <strong>Perfect for:</strong> Processing nightmares, understanding recurring dreams, building confidence, and creating positive bedtime routines.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-3 p-6 rounded-lg bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-950/20 dark:to-orange-950/20 border border-yellow-200 dark:border-yellow-800\">\n                <BarChart3 className=\"h-8 w-8 text-chart-4 mt-1 flex-shrink-0\" />\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-semibold text-chart-4 text-lg\">📊 Growth Tracker - Your Progress Visualizer</h4>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    <strong>What it does:</strong> Beautiful charts showing your mood patterns over time, with AI-generated insights and personalized feedback on your emotional growth.\n                  </p>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    <strong>How it helps:</strong> Identifies emotional patterns, celebrates progress, provides motivation during tough times, and helps you understand your triggers and strengths.\n                  </p>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    <strong>Perfect for:</strong> Tracking emotional patterns, celebrating small wins, identifying triggers, and staying motivated on your wellness journey.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Wellness Tools */}\n          <div className=\"space-y-4 border-t pt-6\">\n            <h3 className=\"text-xl font-semibold text-accent text-center\">{t.home.wellnessTools}</h3>\n            \n            <div className=\"grid md:grid-cols-3 gap-4\">\n              <div className=\"text-center p-4 rounded-lg bg-gradient-to-br from-red-50 to-pink-50 dark:from-red-950/20 dark:to-pink-950/20\">\n                <Heart className=\"h-8 w-8 text-destructive mx-auto mb-2\" />\n                <h4 className=\"font-semibold text-destructive\">{t.home.sosSupport.title}</h4>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  {t.home.sosSupport.description}\n                </p>\n              </div>\n              \n              <div className=\"text-center p-4 rounded-lg bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-950/20 dark:to-emerald-950/20\">\n                <Target className=\"h-8 w-8 text-green-600 mx-auto mb-2\" />\n                <h4 className=\"font-semibold text-green-600\">{t.home.growthHub.title}</h4>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  {t.home.growthHub.description}\n                </p>\n              </div>\n              \n              <div className=\"text-center p-4 rounded-lg bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-950/20 dark:to-cyan-950/20\">\n                <Heart className=\"h-8 w-8 text-blue-600 mx-auto mb-2\" />\n                <h4 className=\"font-semibold text-blue-600\">{t.home.multilingualSupport.title}</h4>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  {t.home.multilingualSupport.description}\n                </p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Mission Statement */}\n      <Card className=\"border-accent/20 bg-gradient-to-br from-accent/5 to-primary/5\">\n        <CardContent className=\"p-8 text-center\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <Target className=\"h-8 w-8 text-accent\" />\n            <h2 className=\"text-2xl font-bold text-accent\">Our Mission</h2>\n          </div>\n          <p className=\"text-lg text-muted-foreground\">\n            To give young people a safe space to express, relax, and grow.\n          </p>\n          <div className=\"flex justify-center gap-4 mt-6\">\n            <div className=\"w-6 h-6 bg-yellow-300 dark:bg-yellow-500 rounded-full animate-pulse\" />\n            <Heart className=\"h-6 w-6 text-destructive mt-1\" />\n            <div className=\"w-6 h-6 bg-yellow-300 dark:bg-yellow-500 rounded-full animate-pulse\" />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Floating Background Elements */}\n      <style>{`\n        .animate-pulse {\n          animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n        }\n        \n        @keyframes pulse {\n          0%, 100% {\n            opacity: 1;\n          }\n          50% {\n            opacity: .5;\n          }\n        }\n      `}</style>\n    </div>\n  );\n}","size_bytes":9701},"client/src/components/LanguageSwitcher.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Globe, ChevronDown } from \"lucide-react\";\nimport { useTranslation } from \"../contexts/TranslationContext\";\nimport type { TranslationKey } from \"@shared/translations\";\n\ninterface Language {\n  code: TranslationKey;\n  name: string;\n  flag: string;\n}\n\n// Limited to Hindi and English only for MindEase\nconst languages: Language[] = [\n  { code: \"en\", name: \"English\", flag: \"🇺🇸\" },\n  { code: \"hi\", name: \"हिंदी\", flag: \"🇮🇳\" },\n];\n\ninterface LanguageSwitcherProps {\n  variant?: \"default\" | \"ghost\" | \"outline\";\n  size?: \"default\" | \"sm\" | \"lg\";\n}\n\nexport default function LanguageSwitcher({ \n  variant = \"ghost\", \n  size = \"default\" \n}: LanguageSwitcherProps) {\n  const { currentLanguage, changeLanguage, t } = useTranslation();\n  \n  const currentLangData = languages.find(lang => lang.code === currentLanguage) || languages[0];\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant={variant} \n          size={size}\n          data-testid=\"button-language-switcher\"\n          className=\"hover-elevate\"\n        >\n          <Globe className=\"h-4 w-4 mr-2\" />\n          <span className=\"hidden sm:inline\">{currentLangData.flag}</span>\n          <span className=\"hidden md:inline ml-1\">\n            {currentLanguage === \"en\" ? t.languages.english : t.languages.hindi}\n          </span>\n          <ChevronDown className=\"h-3 w-3 ml-1\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"min-w-[150px]\">\n        {languages.map((language) => (\n          <DropdownMenuItem\n            key={language.code}\n            onClick={() => changeLanguage(language.code)}\n            className=\"flex items-center gap-2 cursor-pointer\"\n            data-testid={`option-language-${language.code}`}\n          >\n            <span className=\"text-lg\">{language.flag}</span>\n            <span>\n              {language.code === \"en\" ? t.languages.english : t.languages.hindi}\n            </span>\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":2269},"client/src/components/PersonalDiary.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Input } from \"@/components/ui/input\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { BookOpen, Save, Heart, Sparkles, Lock, CalendarDays } from \"lucide-react\";\nimport { trackDiaryEntry } from \"@/lib/usage\";\n\ninterface DiaryEntry {\n  id: string;\n  title: string;\n  content: string;\n  date: Date;\n  affirmation?: string;\n}\n\nexport default function PersonalDiary() {\n  const [currentTitle, setCurrentTitle] = useState(\"\");\n  const [currentContent, setCurrentContent] = useState(\"\");\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());\n  const [showCalendar, setShowCalendar] = useState(false);\n  const [entries, setEntries] = useState<DiaryEntry[]>([\n    // TODO: remove mock data\n    {\n      id: \"1\",\n      title: \"A challenging day\",\n      content: \"Today was really difficult. I felt overwhelmed with school and couldn't focus. But I tried the breathing exercise from MindEase and it helped a bit. I'm grateful I have this space to write.\",\n      date: new Date(Date.now() - 24 * 60 * 60 * 1000),\n      affirmation: \"You showed incredible strength by reaching out for help and using healthy coping strategies.\"\n    },\n    {\n      id: \"2\",\n      title: \"Small wins\",\n      content: \"Had a good conversation with my friend today. We talked about our dreams and it made me feel hopeful about the future. Sometimes I forget how important friendships are.\",\n      date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n      affirmation: \"Your ability to connect meaningfully with others shows your emotional intelligence and kindness.\"\n    }\n  ]);\n\n  const saveEntry = () => {\n    if (!currentTitle.trim() || !currentContent.trim()) return;\n\n    // Generate AI affirmation (mock - in real app would call OpenAI)\n    const generateAffirmation = (content: string) => {\n      const affirmations = [\n        \"Your willingness to reflect and grow shows incredible self-awareness and maturity.\",\n        \"Every word you write is a step toward understanding yourself better. That's beautiful.\",\n        \"Your thoughts and feelings are valid and important. Thank you for sharing them here.\",\n        \"The fact that you're taking time for self-reflection shows how much you value your growth.\",\n        \"Your honesty with yourself is a superpower that will guide you through any challenge.\"\n      ];\n      return affirmations[Math.floor(Math.random() * affirmations.length)];\n    };\n\n    const newEntry: DiaryEntry = {\n      id: Date.now().toString(),\n      title: currentTitle.trim(),\n      content: currentContent.trim(),\n      date: new Date(),\n      affirmation: generateAffirmation(currentContent)\n    };\n\n    setEntries(prev => [newEntry, ...prev]);\n    setCurrentTitle(\"\");\n    setCurrentContent(\"\");\n    \n    // Track usage for achievements\n    trackDiaryEntry();\n    \n    console.log(\"Saved diary entry:\", newEntry.title);\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <div className=\"flex items-center justify-center gap-2\">\n          <Lock className=\"h-6 w-6 text-green-600\" />\n          <h2 className=\"text-2xl font-bold text-primary\">📔 Your Private Diary</h2>\n        </div>\n        <p className=\"text-muted-foreground\">\n          🔒 A safe space for your thoughts, dreams, and feelings - completely private and secure ✨\n        </p>\n        \n        {/* Calendar with Smiling Faces */}\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          <div className=\"md:col-span-2\">\n            {/* Calendar Toggle */}\n            <Button\n              onClick={() => setShowCalendar(!showCalendar)}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"mb-4 hover-elevate\"\n              data-testid=\"button-toggle-calendar\"\n            >\n              <CalendarDays className=\"h-4 w-4 mr-2\" />\n              {showCalendar ? \"Hide Calendar\" : \"Show Calendar\"} 📅\n            </Button>\n            \n            {showCalendar && (\n              <Card className=\"border-2 border-yellow-200 bg-gradient-to-br from-yellow-50 to-orange-50 dark:from-yellow-950/20 dark:to-orange-950/20\">\n                <CardHeader>\n                  <CardTitle className=\"text-center text-yellow-700 dark:text-yellow-300\">\n                    😊 Your Wellness Calendar 😊\n                  </CardTitle>\n                  <CardDescription className=\"text-center\">\n                    Every day is a new opportunity for growth and happiness! 🌟\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"flex justify-center\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={selectedDate}\n                    onSelect={setSelectedDate}\n                    className=\"rounded-md border\"\n                    components={{\n                      Day: ({ date, ...props }) => {\n                        const isToday = date?.toDateString() === new Date().toDateString();\n                        const isSelected = date?.toDateString() === selectedDate?.toDateString();\n                        const dayNumber = date?.getDate() || 0;\n                        \n                        // Add smiling faces based on the day\n                        const smileEmoji = dayNumber % 5 === 0 ? \"😊\" : \n                                         dayNumber % 4 === 0 ? \"😄\" :\n                                         dayNumber % 3 === 0 ? \"🙂\" :\n                                         dayNumber % 2 === 0 ? \"😌\" : \"😊\";\n                        \n                        return (\n                          <button\n                            {...props}\n                            className={`\n                              relative h-9 w-9 p-0 font-normal aria-selected:opacity-100 \n                              ${isToday ? 'bg-yellow-300 text-yellow-900 rounded-full font-bold' : ''}\n                              ${isSelected ? 'bg-primary text-primary-foreground rounded-full' : ''}\n                              hover:bg-yellow-200 transition-all duration-200\n                            `}\n                            data-testid={`calendar-day-${dayNumber}`}\n                          >\n                            <div className=\"flex flex-col items-center\">\n                              <span className=\"text-xs\">{dayNumber}</span>\n                              <span className=\"text-[8px]\">{smileEmoji}</span>\n                            </div>\n                          </button>\n                        );\n                      }\n                    }}\n                  />\n                </CardContent>\n              </Card>\n            )}\n          </div>\n          \n          <div className=\"space-y-4\">\n            <Card className=\"text-center bg-gradient-to-br from-pink-50 to-purple-50 dark:from-pink-950/20 dark:to-purple-950/20\">\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl mb-2\">🌈</div>\n                <div className=\"text-sm font-semibold text-purple-700 dark:text-purple-300\">Today's Mood</div>\n                <div className=\"text-xs text-muted-foreground\">Click to add! 😊</div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"text-center bg-gradient-to-br from-green-50 to-blue-50 dark:from-green-950/20 dark:to-blue-950/20\">\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl mb-2\">⭐</div>\n                <div className=\"text-sm font-semibold text-blue-700 dark:text-blue-300\">Gratitude Today</div>\n                <div className=\"text-xs text-muted-foreground\">What made you smile? 😄</div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* New Entry Form */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BookOpen className=\"h-5 w-5 text-primary\" />\n            ✍️ Write a New Entry\n          </CardTitle>\n          <CardDescription>\n            💖 Express yourself freely - AI will create a positive affirmation from your writing ✨\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Input\n            value={currentTitle}\n            onChange={(e) => setCurrentTitle(e.target.value)}\n            placeholder=\"📝 Give your entry a title...\"\n            data-testid=\"input-diary-title\"\n          />\n          <Textarea\n            value={currentContent}\n            onChange={(e) => setCurrentContent(e.target.value)}\n            placeholder=\"🌸 What's on your mind? Write about your day, your dreams, your worries, or anything else you'd like to express... 💭\"\n            className=\"min-h-[150px] resize-none\"\n            data-testid=\"textarea-diary-content\"\n          />\n          <Button\n            onClick={saveEntry}\n            disabled={!currentTitle.trim() || !currentContent.trim()}\n            data-testid=\"button-save-entry\"\n            className=\"w-full hover-elevate\"\n          >\n            <Save className=\"h-4 w-4 mr-2\" />\n            💾 Save Entry ✨\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Diary Entries */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Heart className=\"h-5 w-5 text-destructive\" />\n            💖 Your Journal ({entries.length} entries) 📚\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ScrollArea className=\"h-[500px] pr-4\">\n            <div className=\"space-y-4\">\n              {entries.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <div className=\"text-6xl mb-4\">📖</div>\n                  <p>📝 Your diary is waiting for your first entry! ✨</p>\n                  <p className=\"text-sm mt-2\">🌟 Start by writing about your day or anything on your mind. 💭</p>\n                </div>\n              ) : (\n                entries.map((entry) => (\n                  <Card key={entry.id} className=\"border-l-4 border-l-primary\">\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <CardTitle className=\"text-lg\">{entry.title}</CardTitle>\n                        <span className=\"text-sm text-muted-foreground\">\n                          {entry.date.toLocaleDateString()}\n                        </span>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"prose prose-sm max-w-none\">\n                        <p className=\"text-muted-foreground leading-relaxed whitespace-pre-wrap\">\n                          {entry.content}\n                        </p>\n                      </div>\n                      \n                      {entry.affirmation && (\n                        <div className=\"bg-gradient-to-r from-primary/5 to-accent/5 p-4 rounded-lg border border-primary/20\">\n                          <div className=\"flex items-start gap-2\">\n                            <Sparkles className=\"h-4 w-4 text-primary mt-1 flex-shrink-0\" />\n                            <div>\n                              <h4 className=\"font-medium text-primary text-sm mb-1\">\n                                ✨ AI Affirmation 💝\n                              </h4>\n                              <p className=\"text-sm text-muted-foreground italic\">\n                                {entry.affirmation}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </ScrollArea>\n        </CardContent>\n      </Card>\n\n      {/* Privacy Notice */}\n      <Card className=\"border-green-200 bg-green-50 dark:bg-green-950/20 dark:border-green-800\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-start gap-3\">\n            <Lock className=\"h-5 w-5 text-green-600 mt-0.5 flex-shrink-0\" />\n            <div>\n              <h3 className=\"font-semibold text-green-800 dark:text-green-200 mb-1\">\n                🔐 Your Privacy is Protected 🛡️\n              </h3>\n              <p className=\"text-sm text-green-700 dark:text-green-300\">\n                🔒 Your diary entries are completely private and secure. Only you can see what you write here.\n                ✨ AI affirmations are generated to help support your emotional wellbeing. 💚\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13096},"client/src/components/ProfilePage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Heart, BarChart3, BookOpen, Trophy, Calendar, Target } from \"lucide-react\";\nimport GratitudeJar from \"./GratitudeJar\";\nimport GrowthTracker from \"./GrowthTracker\";\nimport PersonalDiary from \"./PersonalDiary\";\nimport Achievements from \"./Achievements\";\n\nexport default function ProfilePage() {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  const getGreeting = () => {\n    const greetings = [\n      `👋 Hello! Welcome back to your safe space 💜`,\n      `🌸 Hey there! Ready to reflect and grow today?`,\n      `✨ Welcome back! Your journey continues here 🌟`,\n      `💫 Hi! Time for some self-care and reflection`,\n    ];\n    return greetings[Math.floor(Math.random() * greetings.length)];\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Greeting Header */}\n      <Card className=\"border-primary/20 bg-gradient-to-r from-primary/5 to-accent/5\">\n        <CardContent className=\"p-8 text-center\">\n          <h1 className=\"text-2xl md:text-3xl font-bold text-primary mb-2\">\n            {getGreeting()}\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Your personal wellness space for growth, reflection, and celebration 🌟\n          </p>\n        </CardContent>\n      </Card>\n\n      {/* Navigation Tabs for Profile Features */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5 bg-background/50 border\">\n          <TabsTrigger \n            value=\"overview\" \n            data-testid=\"tab-overview\"\n            className=\"data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\"\n          >\n            <Heart className=\"h-4 w-4 mr-2\" />\n            Overview\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"gratitude\" \n            data-testid=\"tab-gratitude\"\n            className=\"data-[state=active]:bg-yellow-500 data-[state=active]:text-white\"\n          >\n            🫙 Jar Game\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"tracker\" \n            data-testid=\"tab-tracker\"\n            className=\"data-[state=active]:bg-blue-500 data-[state=active]:text-white\"\n          >\n            <BarChart3 className=\"h-4 w-4 mr-1\" />\n            Growth Tracker\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"diary\" \n            data-testid=\"tab-diary\"\n            className=\"data-[state=active]:bg-green-500 data-[state=active]:text-white\"\n          >\n            <BookOpen className=\"h-4 w-4 mr-1\" />\n            Personal Diary\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"achievements\" \n            data-testid=\"tab-achievements\"\n            className=\"data-[state=active]:bg-purple-500 data-[state=active]:text-white\"\n          >\n            <Trophy className=\"h-4 w-4 mr-1\" />\n            Achievements\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6 mt-6\">\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <Card \n              className=\"text-center cursor-pointer hover-elevate transition-all\"\n              onClick={() => setActiveTab(\"gratitude\")}\n              data-testid=\"card-stat-gratitude\"\n            >\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold text-yellow-600\">12</div>\n                <div className=\"text-xs text-muted-foreground\">🫙 Gratitude Notes</div>\n              </CardContent>\n            </Card>\n            <Card \n              className=\"text-center cursor-pointer hover-elevate transition-all\"\n              onClick={() => setActiveTab(\"tracker\")}\n              data-testid=\"card-stat-tracker\"\n            >\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold text-blue-600\">7</div>\n                <div className=\"text-xs text-muted-foreground\">📊 Days Tracked</div>\n              </CardContent>\n            </Card>\n            <Card \n              className=\"text-center cursor-pointer hover-elevate transition-all\"\n              onClick={() => setActiveTab(\"diary\")}\n              data-testid=\"card-stat-diary\"\n            >\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold text-green-600\">5</div>\n                <div className=\"text-xs text-muted-foreground\">📔 Diary Entries</div>\n              </CardContent>\n            </Card>\n            <Card \n              className=\"text-center cursor-pointer hover-elevate transition-all\"\n              onClick={() => setActiveTab(\"achievements\")}\n              data-testid=\"card-stat-achievements\"\n            >\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold text-purple-600\">3</div>\n                <div className=\"text-xs text-muted-foreground\">🏅 Badges Earned</div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Feature Cards */}\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <Card \n              className=\"bg-gradient-to-br from-yellow-50 to-orange-50 dark:from-yellow-950/20 dark:to-orange-950/20 border-2 border-transparent hover:border-yellow-300 transition-all duration-300 hover-elevate cursor-pointer group\"\n              onClick={() => setActiveTab(\"gratitude\")}\n              data-testid=\"card-feature-gratitude\"\n            >\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center gap-3\">\n                  <span className=\"text-3xl\">🫙</span>\n                  <div>\n                    <CardTitle className=\"text-lg group-hover:text-yellow-600 transition-colors\">\n                      Gratitude Jar Game\n                    </CardTitle>\n                    <CardDescription className=\"text-sm mt-1\">\n                      Drop one good thing from your day into your virtual jar\n                    </CardDescription>\n                  </div>\n                </div>\n              </CardHeader>\n            </Card>\n            \n            <Card \n              className=\"bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-950/20 dark:to-cyan-950/20 border-2 border-transparent hover:border-blue-300 transition-all duration-300 hover-elevate cursor-pointer group\"\n              onClick={() => setActiveTab(\"tracker\")}\n              data-testid=\"card-feature-tracker\"\n            >\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center gap-3\">\n                  <span className=\"text-3xl\">📊</span>\n                  <div>\n                    <CardTitle className=\"text-lg group-hover:text-blue-600 transition-colors\">\n                      Personal Growth Tracker\n                    </CardTitle>\n                    <CardDescription className=\"text-sm mt-1\">\n                      Simple chart of moods over time with AI feedback\n                    </CardDescription>\n                  </div>\n                </div>\n              </CardHeader>\n            </Card>\n            \n            <Card \n              className=\"bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-950/20 dark:to-emerald-950/20 border-2 border-transparent hover:border-green-300 transition-all duration-300 hover-elevate cursor-pointer group\"\n              onClick={() => setActiveTab(\"diary\")}\n              data-testid=\"card-feature-diary\"\n            >\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center gap-3\">\n                  <span className=\"text-3xl\">📔</span>\n                  <div>\n                    <CardTitle className=\"text-lg group-hover:text-green-600 transition-colors\">\n                      Personal Diary\n                    </CardTitle>\n                    <CardDescription className=\"text-sm mt-1\">\n                      A private space to write thoughts, dreams, or feelings\n                    </CardDescription>\n                  </div>\n                </div>\n              </CardHeader>\n            </Card>\n            \n            <Card \n              className=\"bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-950/20 dark:to-pink-950/20 border-2 border-transparent hover:border-purple-300 transition-all duration-300 hover-elevate cursor-pointer group\"\n              onClick={() => setActiveTab(\"achievements\")}\n              data-testid=\"card-feature-achievements\"\n            >\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center gap-3\">\n                  <span className=\"text-3xl\">🏅</span>\n                  <div>\n                    <CardTitle className=\"text-lg group-hover:text-purple-600 transition-colors\">\n                      Achievements & Badges\n                    </CardTitle>\n                    <CardDescription className=\"text-sm mt-1\">\n                      Celebrate your progress with earned badges and milestones\n                    </CardDescription>\n                  </div>\n                </div>\n              </CardHeader>\n            </Card>\n          </div>\n\n          {/* Today's Inspiration */}\n          <Card className=\"border-accent/20 bg-gradient-to-r from-accent/5 to-primary/5\">\n            <CardHeader>\n              <CardTitle className=\"text-center text-accent\">Today's Inspiration ✨</CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-center\">\n              <p className=\"text-lg font-medium text-muted-foreground italic\">\n                \"Every small step forward is a victory worth celebrating. You're doing amazing!\"\n              </p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Individual Feature Tabs */}\n        <TabsContent value=\"gratitude\" className=\"mt-6\">\n          <GratitudeJar />\n        </TabsContent>\n\n        <TabsContent value=\"tracker\" className=\"mt-6\">\n          <GrowthTracker />\n        </TabsContent>\n\n        <TabsContent value=\"diary\" className=\"mt-6\">\n          <PersonalDiary />\n        </TabsContent>\n\n        <TabsContent value=\"achievements\" className=\"mt-6\">\n          <Achievements />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":10494},"client/src/components/SOSButton.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Heart, Phone, Brain, Activity } from \"lucide-react\";\nimport { trackSOSUse } from \"@/lib/usage\";\nimport BreathingExercise from \"./BreathingExercise\";\nimport GroundingGame from \"./GroundingGame\";\nimport StretchRoutine from \"./StretchRoutine\";\n\nexport default function SOSButton() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <Button\n        onClick={() => {\n          setIsOpen(true);\n          trackSOSUse(); // Track usage for achievements\n        }}\n        data-testid=\"button-sos\"\n        className=\"fixed bottom-6 right-6 h-16 w-16 rounded-full bg-destructive text-destructive-foreground shadow-lg hover:bg-destructive/90 z-50 pulse-animation\"\n        size=\"icon\"\n      >\n        <Heart className=\"h-8 w-8\" />\n      </Button>\n\n      <Dialog open={isOpen} onOpenChange={setIsOpen}>\n        <DialogContent className=\"sm:max-w-md max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-center text-xl font-bold text-destructive\">\n              SOS Support\n            </DialogTitle>\n          </DialogHeader>\n\n          <Tabs defaultValue=\"calm\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"calm\" data-testid=\"tab-calm\">\n                <Brain className=\"h-4 w-4 mr-1\" />\n                Calm\n              </TabsTrigger>\n              <TabsTrigger value=\"move\" data-testid=\"tab-move\">\n                <Activity className=\"h-4 w-4 mr-1\" />\n                Move\n              </TabsTrigger>\n              <TabsTrigger value=\"support\" data-testid=\"tab-support\">\n                <Phone className=\"h-4 w-4 mr-1\" />\n                Support\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"calm\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Instant Calming Exercises</CardTitle>\n                  <CardDescription>\n                    Take a moment to breathe and center yourself\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <BreathingExercise />\n                  <GroundingGame />\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"move\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Body Movement & Mini Exercises</CardTitle>\n                  <CardDescription>\n                    Gentle movement to release tension and reset your energy\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <StretchRoutine />\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"support\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Emergency Resources</CardTitle>\n                  <CardDescription>\n                    Connect with support when you need it most\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      onClick={() => console.log(\"Crisis Text Line activated\")}\n                      data-testid=\"button-crisis-text\"\n                    >\n                      <Phone className=\"h-4 w-4 mr-2\" />\n                      Crisis Text Line: Text HOME to 741741\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      onClick={() => console.log(\"National Suicide Prevention Lifeline activated\")}\n                      data-testid=\"button-suicide-prevention\"\n                    >\n                      <Phone className=\"h-4 w-4 mr-2\" />\n                      National Suicide Prevention Lifeline: 988\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      onClick={() => console.log(\"Talk to trusted person activated\")}\n                      data-testid=\"button-trusted-person\"\n                    >\n                      <Heart className=\"h-4 w-4 mr-2\" />\n                      Talk to a trusted person right now\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </DialogContent>\n      </Dialog>\n\n      <style>{`\n        .pulse-animation {\n          animation: pulse 2s infinite;\n        }\n        \n        @keyframes pulse {\n          0% {\n            transform: scale(1);\n          }\n          50% {\n            transform: scale(1.05);\n          }\n          100% {\n            transform: scale(1);\n          }\n        }\n      `}</style>\n    </>\n  );\n}","size_bytes":5503},"client/src/components/StretchRoutine.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Play, Pause, SkipForward, RotateCcw } from \"lucide-react\";\n\nconst stretches = [\n  {\n    name: \"Neck Roll\",\n    duration: 30,\n    instructions: \"Slowly roll your head in a circle. 5 times each direction.\",\n    image: \"🔄\"\n  },\n  {\n    name: \"Shoulder Shrugs\",\n    duration: 20,\n    instructions: \"Lift shoulders to ears, hold for 3 seconds, release.\",\n    image: \"🤷\"\n  },\n  {\n    name: \"Arm Stretch\",\n    duration: 30,\n    instructions: \"Reach one arm across your chest, hold with other arm.\",\n    image: \"💪\"\n  },\n  {\n    name: \"Shake It Out\",\n    duration: 30,\n    instructions: \"Shake your whole body! Release all the tension.\",\n    image: \"🕺\"\n  }\n];\n\nexport default function StretchRoutine() {\n  const [currentStretch, setCurrentStretch] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(stretches[0].duration);\n  const [isActive, setIsActive] = useState(false);\n  const [isComplete, setIsComplete] = useState(false);\n\n  useEffect(() => {\n    setTimeLeft(stretches[currentStretch]?.duration || 0);\n  }, [currentStretch]);\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n\n    if (isActive && timeLeft > 0) {\n      interval = setInterval(() => {\n        setTimeLeft((prev) => prev - 1);\n      }, 1000);\n    } else if (isActive && timeLeft === 0) {\n      // Move to next stretch\n      if (currentStretch < stretches.length - 1) {\n        setCurrentStretch((prev) => prev + 1);\n      } else {\n        setIsComplete(true);\n        setIsActive(false);\n        console.log(\"Stretch routine completed\");\n      }\n    }\n\n    return () => clearInterval(interval);\n  }, [isActive, timeLeft, currentStretch]);\n\n  const handlePlayPause = () => {\n    setIsActive(!isActive);\n    console.log(`Stretch routine ${isActive ? \"paused\" : \"started\"}`);\n  };\n\n  const handleNext = () => {\n    if (currentStretch < stretches.length - 1) {\n      setCurrentStretch((prev) => prev + 1);\n      setIsActive(false);\n    }\n    console.log(\"Skipped to next stretch\");\n  };\n\n  const handleReset = () => {\n    setCurrentStretch(0);\n    setIsActive(false);\n    setIsComplete(false);\n    console.log(\"Stretch routine reset\");\n  };\n\n  const progressPercentage = ((stretches[currentStretch]?.duration - timeLeft) / stretches[currentStretch]?.duration) * 100;\n\n  if (isComplete) {\n    return (\n      <Card className=\"border-green-200 bg-green-50 dark:bg-green-950 dark:border-green-800\">\n        <CardContent className=\"p-6 text-center\">\n          <div className=\"text-4xl mb-4\">🎉</div>\n          <h3 className=\"font-semibold text-green-800 dark:text-green-200 mb-2\">\n            Stretch Complete!\n          </h3>\n          <p className=\"text-sm text-green-700 dark:text-green-300 mb-4\">\n            Great job! You've completed your mini stretch routine.\n          </p>\n          <Button\n            onClick={handleReset}\n            data-testid=\"button-stretch-restart\"\n            variant=\"outline\"\n            size=\"sm\"\n          >\n            <RotateCcw className=\"h-4 w-4 mr-1\" />\n            Do Again\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const stretch = stretches[currentStretch];\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <div className=\"text-4xl mb-2\">{stretch.image}</div>\n        <h3 className=\"font-semibold text-lg\">{stretch.name}</h3>\n        <p className=\"text-sm text-muted-foreground mb-4\">\n          {stretch.instructions}\n        </p>\n      </div>\n\n      <div className=\"space-y-3\">\n        <div className=\"text-center\">\n          <div className=\"text-3xl font-bold text-primary mb-2\">{timeLeft}s</div>\n          <Progress value={progressPercentage} className=\"w-full\" />\n        </div>\n\n        <div className=\"flex justify-center gap-2\">\n          <Button\n            onClick={handlePlayPause}\n            data-testid=\"button-stretch-toggle\"\n            variant=\"default\"\n            size=\"sm\"\n          >\n            {isActive ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n            {isActive ? \"Pause\" : \"Start\"}\n          </Button>\n          \n          {currentStretch < stretches.length - 1 && (\n            <Button\n              onClick={handleNext}\n              data-testid=\"button-stretch-next\"\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              <SkipForward className=\"h-4 w-4\" />\n              Next\n            </Button>\n          )}\n          \n          <Button\n            onClick={handleReset}\n            data-testid=\"button-stretch-reset\"\n            variant=\"outline\"\n            size=\"sm\"\n          >\n            <RotateCcw className=\"h-4 w-4\" />\n            Reset\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"flex justify-center gap-2 mt-4\">\n        {stretches.map((_, index) => (\n          <div\n            key={index}\n            className={`w-2 h-2 rounded-full ${\n              index === currentStretch\n                ? \"bg-primary\"\n                : index < currentStretch\n                ? \"bg-green-500\"\n                : \"bg-muted\"\n            }`}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":5338},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ninterface ThemeContextType {\n  theme: \"light\" | \"dark\";\n  toggleTheme: () => void;\n  isDark: boolean;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(() => {\n    if (typeof window !== \"undefined\") {\n      return (localStorage.getItem(\"theme\") as \"light\" | \"dark\") || \"light\";\n    }\n    return \"light\";\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  const value = {\n    theme,\n    toggleTheme,\n    isDark: theme === \"dark\",\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}","size_bytes":1222},"client/src/components/WelcomePage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Moon, Sun, Heart } from \"lucide-react\";\nimport { useTheme } from \"./ThemeProvider\";\nimport { useTranslation } from \"../contexts/TranslationContext\";\nimport LanguageSwitcher from \"./LanguageSwitcher\";\nimport { Link } from \"wouter\";\n\nexport default function WelcomePage() {\n  const { theme, toggleTheme } = useTheme();\n  const { t } = useTranslation();\n  const [greeting, setGreeting] = useState(\"\");\n\n  useEffect(() => {\n    const getTimeBasedGreeting = () => {\n      const hour = new Date().getHours();\n      if (hour < 12) return t.welcome.greetings.morning;\n      if (hour < 17) return t.welcome.greetings.afternoon;\n      return t.welcome.greetings.evening;\n    };\n    setGreeting(getTimeBasedGreeting());\n  }, [t]);\n\n  return (\n    <div className=\"min-h-screen relative overflow-hidden\">\n      {/* Animated Background */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-primary/20 via-accent/30 to-primary/40 animate-gradient-shift\">\n        <div className=\"floating-shapes\">\n          {[...Array(6)].map((_, i) => (\n            <div\n              key={i}\n              className={`floating-shape floating-shape-${i + 1}`}\n              style={{\n                left: `${Math.random() * 100}%`,\n                top: `${Math.random() * 100}%`,\n                animationDelay: `${Math.random() * 10}s`,\n              }}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Header */}\n      <header className=\"relative z-10 flex justify-between items-center p-6\">\n        <div className=\"flex items-center gap-2\">\n          <Heart className=\"h-8 w-8 text-primary\" />\n          <span className=\"text-2xl font-bold text-primary\">{t.common.mindease}</span>\n        </div>\n        \n        <div className=\"flex items-center gap-3\">\n          <LanguageSwitcher />\n          <Button\n            onClick={toggleTheme}\n            variant=\"ghost\"\n            size=\"icon\"\n            data-testid=\"button-theme-toggle\"\n            className=\"hover-elevate\"\n          >\n            {theme === \"dark\" ? (\n              <Sun className=\"h-5 w-5\" />\n            ) : (\n              <Moon className=\"h-5 w-5\" />\n            )}\n          </Button>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"relative z-10 flex flex-col items-center justify-center min-h-[calc(100vh-100px)] px-6 text-center\">\n        <div className=\"max-w-4xl mx-auto space-y-8\">\n          {/* Greeting */}\n          <div className=\"space-y-4\">\n            <h1 className=\"text-4xl md:text-6xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n              {greeting}\n            </h1>\n            <div className=\"text-2xl md:text-3xl font-semibold text-foreground/80\">\n              {t.welcome.title}\n            </div>\n          </div>\n\n          {/* Animated tagline */}\n          <div className=\"relative\">\n            <div className=\"text-xl md:text-2xl font-medium text-muted-foreground slide-in-up\">\n              {t.welcome.tagline}\n            </div>\n            <div className=\"absolute -inset-2 bg-gradient-to-r from-primary/20 to-accent/20 rounded-lg blur-lg opacity-50 -z-10\" />\n          </div>\n\n          {/* CTA Button */}\n          <div className=\"pt-8\">\n            <Link to=\"/home\">\n              <Button\n                size=\"lg\"\n                className=\"text-lg px-8 py-4 rounded-xl hover-elevate bg-primary text-primary-foreground hover:bg-primary/90\"\n                data-testid=\"button-enter-mindease\"\n              >\n                {t.welcome.enterButton}\n                <Heart className=\"ml-2 h-5 w-5\" />\n              </Button>\n            </Link>\n          </div>\n\n          {/* Floating elements - using simple shapes instead of emojis */}\n          <div className=\"flex justify-center gap-8 pt-12\">\n            <div className=\"animate-float-1 w-4 h-4 bg-pink-300 dark:bg-pink-600 rounded-full opacity-60\" />\n            <div className=\"animate-float-2 w-3 h-3 bg-yellow-300 dark:bg-yellow-500 rounded-sm rotate-45 opacity-70\" />\n            <div className=\"animate-float-3 w-5 h-3 bg-purple-300 dark:bg-purple-500 rounded-full opacity-50\" />\n            <div className=\"animate-float-1 w-4 h-4 bg-blue-300 dark:bg-blue-500 rounded-full opacity-60\" style={{ animationDelay: \"1s\" }} />\n          </div>\n        </div>\n      </main>\n\n      <style>{`\n        .animate-gradient-shift {\n          background-size: 300% 300%;\n          animation: gradientShift 8s ease infinite;\n        }\n\n        @keyframes gradientShift {\n          0% { background-position: 0% 50%; }\n          50% { background-position: 100% 50%; }\n          100% { background-position: 0% 50%; }\n        }\n\n        .floating-shapes .floating-shape {\n          position: absolute;\n          width: 20px;\n          height: 20px;\n          background: rgba(255, 255, 255, 0.1);\n          border-radius: 50%;\n          animation: float 6s ease-in-out infinite;\n        }\n\n        .floating-shape-1 { width: 15px; height: 15px; }\n        .floating-shape-2 { width: 25px; height: 25px; }\n        .floating-shape-3 { width: 18px; height: 18px; }\n        .floating-shape-4 { width: 22px; height: 22px; }\n        .floating-shape-5 { width: 16px; height: 16px; }\n        .floating-shape-6 { width: 28px; height: 28px; }\n\n        @keyframes float {\n          0%, 100% {\n            transform: translateY(0px) rotate(0deg);\n            opacity: 0.5;\n          }\n          50% {\n            transform: translateY(-20px) rotate(180deg);\n            opacity: 0.8;\n          }\n        }\n\n        .slide-in-up {\n          animation: slideInUp 1s ease-out;\n        }\n\n        @keyframes slideInUp {\n          from {\n            opacity: 0;\n            transform: translateY(30px);\n          }\n          to {\n            opacity: 1;\n            transform: translateY(0);\n          }\n        }\n\n        .animate-float-1 {\n          animation: float1 3s ease-in-out infinite;\n        }\n\n        .animate-float-2 {\n          animation: float2 4s ease-in-out infinite;\n        }\n\n        .animate-float-3 {\n          animation: float3 5s ease-in-out infinite;\n        }\n\n        @keyframes float1 {\n          0%, 100% { transform: translateY(0px); }\n          50% { transform: translateY(-10px); }\n        }\n\n        @keyframes float2 {\n          0%, 100% { transform: translateY(0px); }\n          50% { transform: translateY(-15px); }\n        }\n\n        @keyframes float3 {\n          0%, 100% { transform: translateY(0px); }\n          50% { transform: translateY(-8px); }\n        }\n      `}</style>\n    </div>\n  );\n}","size_bytes":6646},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/BreathingExercise.tsx":{"content":"import BreathingExercise from '../BreathingExercise';\n\nexport default function BreathingExerciseExample() {\n  return (\n    <div className=\"p-4 space-y-4\">\n      <h2 className=\"text-xl font-bold\">Breathing Exercise Example</h2>\n      <div className=\"max-w-md mx-auto\">\n        <BreathingExercise />\n      </div>\n    </div>\n  );\n}","size_bytes":328},"client/src/components/examples/DashboardPage.tsx":{"content":"import DashboardPage from '../DashboardPage';\n\nexport default function DashboardPageExample() {\n  return (\n    <div className=\"p-4\">\n      <DashboardPage />\n    </div>\n  );\n}","size_bytes":174},"client/src/components/examples/HomePage.tsx":{"content":"import HomePage from '../HomePage';\n\nexport default function HomePageExample() {\n  return (\n    <div className=\"p-4\">\n      <HomePage />\n    </div>\n  );\n}","size_bytes":154},"client/src/components/examples/LanguageSwitcher.tsx":{"content":"import LanguageSwitcher from '../LanguageSwitcher';\n\nexport default function LanguageSwitcherExample() {\n  return (\n    <div className=\"p-4 space-y-4\">\n      <h2 className=\"text-xl font-bold\">Language Switcher Example</h2>\n      <div className=\"flex gap-4 items-center\">\n        <LanguageSwitcher variant=\"default\" />\n        <LanguageSwitcher variant=\"outline\" />\n        <LanguageSwitcher variant=\"ghost\" />\n      </div>\n    </div>\n  );\n}","size_bytes":440},"client/src/components/examples/ProfilePage.tsx":{"content":"import ProfilePage from '../ProfilePage';\n\nexport default function ProfilePageExample() {\n  return (\n    <div className=\"p-4\">\n      <ProfilePage />\n    </div>\n  );\n}","size_bytes":166},"client/src/components/examples/SOSButton.tsx":{"content":"import SOSButton from '../SOSButton';\n\nexport default function SOSButtonExample() {\n  return (\n    <div className=\"p-4 space-y-4 relative min-h-[200px]\">\n      <h2 className=\"text-xl font-bold\">SOS Button Example</h2>\n      <p className=\"text-muted-foreground\">\n        The SOS button appears as a floating element in the bottom right corner.\n        Click it to access emergency support features.\n      </p>\n      <SOSButton />\n    </div>\n  );\n}","size_bytes":446},"client/src/components/examples/ThemeProvider.tsx":{"content":"import { ThemeProvider as ThemeProviderComponent, useTheme } from '../ThemeProvider';\nimport { Button } from \"@/components/ui/button\";\n\nfunction ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n  \n  return (\n    <Button onClick={toggleTheme}>\n      Current theme: {theme}\n    </Button>\n  );\n}\n\nexport default function ThemeProviderExample() {\n  return (\n    <ThemeProviderComponent>\n      <div className=\"p-4 space-y-4\">\n        <h2 className=\"text-xl font-bold\">Theme Provider Example</h2>\n        <ThemeToggle />\n        <div className=\"p-4 bg-card border rounded-lg\">\n          <p>This content adapts to the current theme</p>\n        </div>\n      </div>\n    </ThemeProviderComponent>\n  );\n}","size_bytes":705},"client/src/components/examples/WelcomePage.tsx":{"content":"import WelcomePage from '../WelcomePage';\nimport { ThemeProvider } from '../ThemeProvider';\n\nexport default function WelcomePageExample() {\n  return (\n    <ThemeProvider>\n      <WelcomePage />\n    </ThemeProvider>\n  );\n}","size_bytes":220},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/lib/usage.ts":{"content":"// Centralized usage tracking for MindEase\n// Tracks real user activity across all features\n\nexport interface UsageStats {\n  chatMessages: number;\n  dreamEntries: number;\n  sandboxCreations: number;\n  gratitudeNotes: number;\n  moodEntries: number;\n  sosUses: number;\n  diaryEntries: number;\n  daysActive: number;\n  weeklyGoalsSet: number;\n  lastActiveDate: string; // ISO date string\n}\n\nconst STORAGE_KEY = 'mindease-usage-stats';\n\n// Initialize with zeros - real usage tracking\nconst defaultStats: UsageStats = {\n  chatMessages: 0,\n  dreamEntries: 0,\n  sandboxCreations: 0,\n  gratitudeNotes: 0,\n  moodEntries: 0,\n  sosUses: 0,\n  diaryEntries: 0,\n  daysActive: 0,\n  weeklyGoalsSet: 0,\n  lastActiveDate: new Date().toISOString().split('T')[0]\n};\n\nexport function getUsageStats(): UsageStats {\n  try {\n    const saved = localStorage.getItem(STORAGE_KEY);\n    if (!saved) {\n      return { ...defaultStats };\n    }\n    return { ...defaultStats, ...JSON.parse(saved) };\n  } catch (error) {\n    console.warn('Failed to load usage stats:', error);\n    return { ...defaultStats };\n  }\n}\n\nexport function setUsageStats(stats: UsageStats): void {\n  try {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(stats));\n  } catch (error) {\n    console.warn('Failed to save usage stats:', error);\n  }\n}\n\nexport function incrementUsage(key: keyof Omit<UsageStats, 'lastActiveDate'>): void {\n  const stats = getUsageStats();\n  stats[key] = (stats[key] || 0) + 1;\n  \n  // Update active days if it's a new day\n  const today = new Date().toISOString().split('T')[0];\n  if (stats.lastActiveDate !== today) {\n    stats.daysActive = (stats.daysActive || 0) + 1;\n    stats.lastActiveDate = today;\n  }\n  \n  setUsageStats(stats);\n  console.log(`Usage tracked: ${key} = ${stats[key]}`);\n}\n\n// Convenience functions for specific features\nexport const trackChatMessage = () => incrementUsage('chatMessages');\nexport const trackDreamEntry = () => incrementUsage('dreamEntries');\nexport const trackSandboxCreation = () => incrementUsage('sandboxCreations');\nexport const trackGratitudeNote = () => incrementUsage('gratitudeNotes');\nexport const trackMoodEntry = () => incrementUsage('moodEntries');\nexport const trackSOSUse = () => incrementUsage('sosUses');\nexport const trackDiaryEntry = () => incrementUsage('diaryEntries');\nexport const trackWeeklyGoal = () => incrementUsage('weeklyGoalsSet');","size_bytes":2368},"replit.md":{"content":"# MindEase Youth Mental Wellness Platform\n\n## Overview\n\nMindEase is a comprehensive youth mental wellness platform that provides 24/7 AI-powered support through multiple therapeutic modalities. The application combines modern web technologies with mental health best practices to create a safe, accessible digital space for young people. The platform features an AI chatbot for emotional support, creative expression tools (Emotion Sandbox), dream reframing capabilities (Dream Journal), personal reflection spaces, and emergency SOS assistance. Built with accessibility and multilingual support in mind, particularly focusing on English and Hindi languages to serve diverse youth populations.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern component patterns\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: React Query (TanStack Query) for server state with React Context for local state management\n- **Styling**: Tailwind CSS with a custom design system inspired by mental health platforms like Headspace and Calm\n- **Component Library**: Radix UI primitives with shadcn/ui components for accessibility-first design\n- **Internationalization**: Custom translation system supporting English and Hindi with Google Fonts integration for proper multilingual typography\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript for full-stack type safety\n- **Session Management**: Express sessions with configurable storage (memory-based for development, extensible to PostgreSQL)\n- **Authentication**: Session-based authentication with bcrypt password hashing\n- **API Design**: RESTful endpoints with consistent error handling and request/response patterns\n\n### Data Storage Strategy\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Connection**: Neon Database serverless PostgreSQL for scalability\n- **Schema**: User management with extensible design for mental health data\n- **Local Storage**: Client-side usage tracking for achievements and analytics\n- **Sessions**: Secure session storage with CSRF protection and HTTP-only cookies\n\n### Design System\n- **Theme**: Dual-mode light/dark theme with calming color palette (deep blues, sage greens)\n- **Accessibility**: High contrast ratios, keyboard navigation, screen reader support\n- **Typography**: Inter and Nunito fonts with special support for Devanagari script\n- **Layout**: Responsive design with consistent spacing primitives and component patterns\n- **Animations**: Subtle animations for breathing exercises and calming visual elements\n\n### Mental Health Features Architecture\n- **AI Integration**: Structured for OpenAI API integration with fallback mock responses\n- **Emergency Support**: Always-visible SOS button with immediate access to coping strategies\n- **Progress Tracking**: Local storage-based achievement system with real usage analytics\n- **Content Safety**: Design patterns focused on positive reframing and emotional validation\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, Wouter for routing, React Hook Form with Zod validation\n- **UI Components**: Radix UI primitive components, Lucide React icons, Recharts for data visualization\n- **Development**: Vite build system, TypeScript compiler, Tailwind CSS, PostCSS\n\n### Backend Services\n- **Database**: Neon Database (PostgreSQL), Drizzle ORM with PostgreSQL adapter\n- **Authentication**: bcrypt for password hashing, express-session for session management\n- **Development Tools**: tsx for TypeScript execution, esbuild for production builds\n\n### External APIs (Planned)\n- **AI Services**: OpenAI API for conversational AI, content generation, and dream reframing\n- **Mental Health Resources**: Integration points for crisis helplines and professional resources\n- **Analytics**: Usage tracking for therapeutic effectiveness measurement\n\n### Third-Party Integrations\n- **Google Fonts**: Inter and Noto Sans Devanagari for multilingual typography\n- **Replit Platform**: Development environment integration with error handling and cartographer tools\n- **Session Storage**: connect-pg-simple for PostgreSQL session storage in production\n\n### Development & Deployment\n- **Package Management**: npm with lockfile for consistent dependency versions\n- **Build Process**: Vite for client bundling, esbuild for server bundling\n- **Environment**: Node.js runtime with Express.js server framework\n- **Database Migrations**: Drizzle Kit for schema management and migrations","size_bytes":4700},"shared/translations/en.ts":{"content":"import type { TranslationObject } from './index';\n\nexport const en = {\n  // Language names\n  languages: {\n    english: \"English\",\n    hindi: \"हिंदी\"\n  },\n\n  // Common\n  common: {\n    mindease: \"MindEase\",\n    loading: \"Loading...\",\n    save: \"Save\",\n    cancel: \"Cancel\",\n    delete: \"Delete\",\n    edit: \"Edit\",\n    add: \"Add\",\n    close: \"Close\"\n  },\n\n  // Welcome Page\n  welcome: {\n    greetings: {\n      morning: \"Good Morning\",\n      afternoon: \"Good Afternoon\", \n      evening: \"Good Evening\"\n    },\n    title: \"Welcome to Your Safe Space\",\n    tagline: \"AI for 24-Hour Youth Mental Wellness\",\n    enterButton: \"Enter MindEase\"\n  },\n\n  // Home Page\n  home: {\n    title: \"Welcome to MindEase\",\n    tagline: \"AI for 24-Hour Youth Mental Wellness\",\n    coreFeatures: \"Core AI-Powered Features\",\n    \n    chatbox: {\n      title: \"AI Chatbox - Your 24/7 Support Friend\",\n      whatItDoes: \"What it does:\",\n      whatItDoesDesc: \"A safe space to share any thoughts, feelings, or concerns. Our AI responds with empathy, validation, and gentle guidance.\",\n      howItHelps: \"How it helps:\",\n      howItHelpsDesc: \"Provides immediate emotional support, helps you process feelings, offers coping strategies, and validates your experiences without judgment.\",\n      perfectFor: \"Perfect for:\",\n      perfectForDesc: \"When you need someone to listen, feeling overwhelmed, processing difficult emotions, or just want to talk through your day.\"\n    },\n\n    emotionSandbox: {\n      title: \"Emotion Sandbox - Creative Expression Therapy\",\n      whatItDoes: \"What it does:\",\n      whatItDoesDesc: \"A digital canvas where you can express emotions through colors, shapes, and creative tools. No artistic skills needed!\",\n      howItHelps: \"How it helps:\",\n      howItHelpsDesc: \"Art therapy techniques help process complex emotions, reduce stress, and provide a healthy outlet for difficult feelings.\",\n      perfectFor: \"Perfect for:\",\n      perfectForDesc: \"When words aren't enough, feeling creative, wanting to explore emotions visually, or needing a meditative activity.\"\n    },\n\n    wellnessTools: \"Instant Wellness Tools\",\n\n    sosSupport: {\n      title: \"SOS Emergency Support\",\n      description: \"Instant access to breathing exercises, grounding techniques, gentle stretches, and crisis resources. Available 24/7 with one click.\"\n    },\n\n    growthHub: {\n      title: \"Personal Growth Hub\", \n      description: \"Gratitude jar game, personal diary with calendar, achievement badges, and progress tracking to celebrate your journey.\"\n    },\n\n    multilingualSupport: {\n      title: \"Multilingual Support\",\n      description: \"Complete support in Hindi and English with proper font rendering and culturally appropriate responses.\"\n    }\n  },\n\n  // Chat Box\n  chatbox: {\n    title: \"AI Support Chat - Your Safe Space\",\n    description: \"Share your thoughts and feelings in a safe, judgment-free space. Our AI listens with empathy and responds with care.\",\n    placeholder: \"Share what's on your mind...\",\n    initialMessage: \"Hello! I'm here to listen and support you. How are you feeling today?\",\n    typing: \"AI is typing...\",\n    aiResponses: [\n      \"I hear you, and your feelings are completely valid. It takes courage to share what you're going through.\",\n      \"Thank you for trusting me with your thoughts. Remember, it's okay to not be okay sometimes.\",\n      \"You're not alone in feeling this way. Many people experience similar emotions, and that's perfectly normal.\",\n      \"I'm glad you felt comfortable sharing that with me. How would you like to explore these feelings?\",\n      \"Your awareness of your emotions shows great self-understanding. That's a wonderful strength you have.\",\n      \"It sounds like you're dealing with a lot right now. Let's take this one step at a time together.\"\n    ]\n  },\n\n  // Breathing Exercise\n  breathing: {\n    title: \"Breathing Exercise\",\n    description: \"Take a moment to center yourself with this guided breathing exercise.\",\n    instructions: {\n      inhale: \"Breathe in slowly...\",\n      hold: \"Hold your breath...\",\n      exhale: \"Breathe out slowly...\"\n    },\n    start: \"Start Exercise\",\n    stop: \"Stop Exercise\"\n  },\n\n  // Gratitude Jar\n  gratitude: {\n    title: \"Gratitude Jar\",\n    addTitle: \"What made you smile today?\",\n    addDescription: \"Even small moments count - a kind word, a beautiful sunset, or a good meal\",\n    placeholder: \"I'm grateful for...\",\n    emptyState: {\n      title: \"Your gratitude jar is waiting for its first note!\",\n      description: \"Start by adding something you're grateful for today.\"\n    },\n    sampleNotes: [\n      \"Had a really good conversation with my friend today\",\n      \"Found a new song that made me feel peaceful\",\n      \"My pet made me smile when I was feeling down\"\n    ]\n  },\n\n  // Personal Diary\n  diary: {\n    title: \"Personal Diary\",\n    description: \"A safe space for your thoughts, feelings, and daily reflections.\",\n    placeholder: \"What's on your mind today?\",\n    save: \"Save Entry\",\n    emptyState: \"No entries yet. Start writing your first entry!\"\n  },\n\n  // SOS Button\n  sos: {\n    title: \"SOS - Emergency Support\",\n    description: \"Immediate help is here. Choose what feels right for you right now.\",\n    breathingExercise: \"Breathing Exercise\",\n    groundingTechnique: \"Grounding Technique\", \n    crisisResources: \"Crisis Resources\",\n    callHotline: \"Call Crisis Hotline\"\n  },\n\n  // Achievements\n  achievements: {\n    title: \"Your Achievements\",\n    description: \"Celebrate your progress and milestones!\",\n    emptyState: \"Complete activities to unlock achievements!\"\n  },\n\n  // Growth Tracker  \n  growth: {\n    title: \"Growth Tracker\",\n    description: \"Track your mental wellness journey over time.\",\n    mood: \"Mood\",\n    activities: \"Activities Completed\", \n    streaks: \"Streak Days\"\n  }\n} satisfies TranslationObject;","size_bytes":5847},"shared/translations/hi.ts":{"content":"import type { TranslationObject } from './index';\n\nexport const hi = {\n  // Language names\n  languages: {\n    english: \"English\",\n    hindi: \"हिंदी\"\n  },\n\n  // Common\n  common: {\n    mindease: \"MindEase\",\n    loading: \"लोड हो रहा है...\",\n    save: \"सेव करें\",\n    cancel: \"रद्द करें\",\n    delete: \"डिलीट करें\", \n    edit: \"एडिट करें\",\n    add: \"जोड़ें\",\n    close: \"बंद करें\"\n  },\n\n  // Welcome Page\n  welcome: {\n    greetings: {\n      morning: \"शुभ प्रभात\",\n      afternoon: \"शुभ दोपहर\",\n      evening: \"शुभ संध्या\"\n    },\n    title: \"आपके सुरक्षित स्थान में आपका स्वागत है\",\n    tagline: \"युवा मानसिक कल्याण के लिए 24 घंटे AI\",\n    enterButton: \"MindEase में प्रवेश करें\"\n  },\n\n  // Home Page\n  home: {\n    title: \"MindEase में आपका स्वागत है\",\n    tagline: \"युवा मानसिक कल्याण के लिए 24 घंटे AI\",\n    coreFeatures: \"मुख्य AI-संचालित सुविधाएं\",\n    \n    chatbox: {\n      title: \"AI चैटबॉक्स - आपका 24/7 सहायक मित्र\",\n      whatItDoes: \"यह क्या करता है:\",\n      whatItDoesDesc: \"अपने किसी भी विचार, भावनाओं या चिंताओं को साझा करने के लिए एक सुरक्षित स्थान। हमारा AI सहानुभूति, समर्थन और सौम्य मार्गदर्शन के साथ जवाब देता है।\",\n      howItHelps: \"यह कैसे मदद करता है:\",\n      howItHelpsDesc: \"तत्काल भावनात्मक सहायता प्रदान करता है, भावनाओं को संभालने में मदद करता है, निपटने की रणनीति प्रदान करता है, और बिना किसी निर्णय के आपके अनुभवों को वैध बनाता है।\",\n      perfectFor: \"इसके लिए बिल्कुल सही:\",\n      perfectForDesc: \"जब आपको किसी की सुनने की आवश्यकता हो, अभिभूत महसूस कर रहे हों, कठिन भावनाओं से निपट रहे हों, या बस अपने दिन के बारे में बात करना चाहते हों।\"\n    },\n\n    emotionSandbox: {\n      title: \"भावना सैंडबॉक्स - रचनात्मक अभिव्यक्ति चिकित्सा\",\n      whatItDoes: \"यह क्या करता है:\",\n      whatItDoesDesc: \"एक डिजिटल कैनवास जहाँ आप रंगों, आकारों और रचनात्मक उपकरणों के माध्यम से भावनाओं को व्यक्त कर सकते हैं। किसी कलात्मक कौशल की आवश्यकता नहीं!\",\n      howItHelps: \"यह कैसे मदद करता है:\",\n      howItHelpsDesc: \"आर्ट थेरेपी तकनीकें जटिल भावनाओं को संभालने, तनाव कम करने और कठिन भावनाओं के लिए एक स्वस्थ आउटलेट प्रदान करने में मदद करती हैं।\",\n      perfectFor: \"इसके लिए बिल्कुल सही:\",\n      perfectForDesc: \"जब शब्द काफी नहीं हैं, रचनात्मक महसूस कर रहे हैं, भावनाओं को दृश्य रूप से देखना चाहते हैं, या ध्यान लगाने वाली गतिविधि की आवश्यकता है।\"\n    },\n\n    wellnessTools: \"तत्काल कल्याण उपकरण\",\n\n    sosSupport: {\n      title: \"SOS आपातकालीन सहायता\",\n      description: \"सांस लेने के व्यायाम, ग्राउंडिंग तकनीक, हल्के स्ट्रेच और संकट संसाधनों तक तुरंत पहुंच। एक क्लिक के साथ 24/7 उपलब्ध।\"\n    },\n\n    growthHub: {\n      title: \"व्यक्तिगत विकास हब\",\n      description: \"कृतज्ञता जार गेम, कैलेंडर के साथ व्यक्तिगत डायरी, उपलब्धि बैज, और आपकी यात्रा का जश्न मनाने के लिए प्रगति ट्रैकिंग।\"\n    },\n\n    multilingualSupport: {\n      title: \"बहुभाषी सहायता\",\n      description: \"उचित फ़ॉन्ट रेंडरिंग और सांस्कृतिक रूप से उपयुक्त प्रतिक्रियाओं के साथ हिंदी और अंग्रेजी में पूर्ण सहायता।\"\n    }\n  },\n\n  // Chat Box\n  chatbox: {\n    title: \"AI सहायता चैट - आपका सुरक्षित स्थान\",\n    description: \"एक सुरक्षित, निर्णय-मुक्त स्थान में अपने विचारों और भावनाओं को साझा करें। हमारा AI सहानुभूति के साथ सुनता है और देखभाल के साथ जवाब देता है।\",\n    placeholder: \"अपने मन की बात साझा करें...\",\n    initialMessage: \"नमस्ते! मैं यहाँ आपकी सुनने और सहायता करने के लिए हूँ। आज आप कैसा महसूस कर रहे हैं?\",\n    typing: \"AI टाइप कर रहा है...\",\n    aiResponses: [\n      \"मैं आपकी बात सुन रहा हूँ, और आपकी भावनाएं पूरी तरह से वैध हैं। आप जो कुछ भी झेल रहे हैं उसे साझा करने के लिए साहस चाहिए।\",\n      \"अपने विचारों के साथ मुझ पर भरोसा करने के लिए धन्यवाद। याद रखें, कभी-कभी ठीक न होना भी ठीक है।\",\n      \"इस तरह महसूस करने में आप अकेले नहीं हैं। कई लोग समान भावनाओं का अनुभव करते हैं, और यह बिल्कुल सामान्य है।\",\n      \"मुझे खुशी है कि आपने इसे मेरे साथ साझा करने में सहजता महसूस की। आप इन भावनाओं को कैसे देखना चाहेंगे?\",\n      \"आपकी भावनाओं के बारे में आपकी जागरूकता महान आत्म-समझ दिखाती है। यह आपकी एक अद्भुत शक्ति है।\",\n      \"लगता है कि आप इस समय बहुत कुछ संभाल रहे हैं। आइए इसे एक कदम एक समय में मिलकर लेते हैं।\"\n    ]\n  },\n\n  // Breathing Exercise\n  breathing: {\n    title: \"सांस लेने का व्यायाम\",\n    description: \"इस निर्देशित सांस लेने के व्यायाम के साथ खुद को केंद्रित करने के लिए एक पल लें।\",\n    instructions: {\n      inhale: \"धीरे-धीरे सांस लें...\",\n      hold: \"अपनी सांस रोकें...\",\n      exhale: \"धीरे-धीरे सांस छोड़ें...\"\n    },\n    start: \"व्यायाम शुरू करें\",\n    stop: \"व्यायाम बंद करें\"\n  },\n\n  // Gratitude Jar\n  gratitude: {\n    title: \"कृतज्ञता जार\",\n    addTitle: \"आज आपको क्या खुशी मिली?\",\n    addDescription: \"छोटे पल भी मायने रखते हैं - एक दयालु शब्द, एक सुंदर सूर्यास्त, या एक अच्छा भोजन\",\n    placeholder: \"मैं इसके लिए आभारी हूं...\",\n    emptyState: {\n      title: \"आपका कृतज्ञता जार अपनी पहली नोट का इंतजार कर रहा है!\",\n      description: \"आज आप जिस चीज के लिए आभारी हैं, उसे जोड़कर शुरुआत करें।\"\n    },\n    sampleNotes: [\n      \"आज मेरे दोस्त के साथ वास्तव में एक अच्छी बातचीत हुई\",\n      \"एक नया गाना मिला जिसने मुझे शांति महसूस कराई\",\n      \"जब मैं उदास महसूस कर रहा था तो मेरे पालतू ने मुझे मुस्कुराया\"\n    ]\n  },\n\n  // Personal Diary\n  diary: {\n    title: \"व्यक्तिगत डायरी\",\n    description: \"आपके विचारों, भावनाओं और दैनिक चिंतन के लिए एक सुरक्षित स्थान।\",\n    placeholder: \"आज आपके मन में क्या है?\",\n    save: \"एंट्री सेव करें\",\n    emptyState: \"अभी तक कोई एंट्री नहीं। अपनी पहली एंट्री लिखना शुरू करें!\"\n  },\n\n  // SOS Button\n  sos: {\n    title: \"SOS - आपातकालीन सहायता\",\n    description: \"तत्काल सहायता यहाँ है। अभी आपके लिए जो सही लगे उसे चुनें।\",\n    breathingExercise: \"सांस लेने का व्यायाम\",\n    groundingTechnique: \"ग्राउंडिंग तकनीक\",\n    crisisResources: \"संकट संसाधन\",\n    callHotline: \"संकट हॉटलाइन पर कॉल करें\"\n  },\n\n  // Achievements\n  achievements: {\n    title: \"आपकी उपलब्धियां\",\n    description: \"अपनी प्रगति और मील के पत्थर का जश्न मनाएं!\",\n    emptyState: \"उपलब्धियों को अनलॉक करने के लिए गतिविधियों को पूरा करें!\"\n  },\n\n  // Growth Tracker  \n  growth: {\n    title: \"विकास ट्रैकर\",\n    description: \"समय के साथ अपनी मानसिक कल्याण यात्रा को ट्रैक करें।\",\n    mood: \"मूड\",\n    activities: \"पूरी की गई गतिविधियां\",\n    streaks: \"लगातार दिन\"\n  }\n} satisfies TranslationObject;","size_bytes":12069},"shared/translations/index.ts":{"content":"import { en } from './en';\nimport { hi } from './hi';\n\nexport const translations = {\n  en,\n  hi\n} as const;\n\nexport type TranslationKey = keyof typeof translations;\n\n// Create a flexible type that matches the structure but allows different string values\nexport type TranslationObject = {\n  languages: {\n    english: string;\n    hindi: string;\n  };\n  common: {\n    mindease: string;\n    loading: string;\n    save: string;\n    cancel: string;\n    delete: string;\n    edit: string;\n    add: string;\n    close: string;\n  };\n  welcome: {\n    greetings: {\n      morning: string;\n      afternoon: string;\n      evening: string;\n    };\n    title: string;\n    tagline: string;\n    enterButton: string;\n  };\n  home: {\n    title: string;\n    tagline: string;\n    coreFeatures: string;\n    chatbox: {\n      title: string;\n      whatItDoes: string;\n      whatItDoesDesc: string;\n      howItHelps: string;\n      howItHelpsDesc: string;\n      perfectFor: string;\n      perfectForDesc: string;\n    };\n    emotionSandbox: {\n      title: string;\n      whatItDoes: string;\n      whatItDoesDesc: string;\n      howItHelps: string;\n      howItHelpsDesc: string;\n      perfectFor: string;\n      perfectForDesc: string;\n    };\n    wellnessTools: string;\n    sosSupport: {\n      title: string;\n      description: string;\n    };\n    growthHub: {\n      title: string;\n      description: string;\n    };\n    multilingualSupport: {\n      title: string;\n      description: string;\n    };\n  };\n  chatbox: {\n    title: string;\n    description: string;\n    placeholder: string;\n    initialMessage: string;\n    typing: string;\n    aiResponses: readonly string[];\n  };\n  breathing: {\n    title: string;\n    description: string;\n    instructions: {\n      inhale: string;\n      hold: string;\n      exhale: string;\n    };\n    start: string;\n    stop: string;\n  };\n  gratitude: {\n    title: string;\n    addTitle: string;\n    addDescription: string;\n    placeholder: string;\n    emptyState: {\n      title: string;\n      description: string;\n    };\n    sampleNotes: readonly string[];\n  };\n  diary: {\n    title: string;\n    description: string;\n    placeholder: string;\n    save: string;\n    emptyState: string;\n  };\n  sos: {\n    title: string;\n    description: string;\n    breathingExercise: string;\n    groundingTechnique: string;\n    crisisResources: string;\n    callHotline: string;\n  };\n  achievements: {\n    title: string;\n    description: string;\n    emptyState: string;\n  };\n  growth: {\n    title: string;\n    description: string;\n    mood: string;\n    activities: string;\n    streaks: string;\n  };\n};\n\nexport { en, hi };","size_bytes":2587},"client/src/contexts/TranslationContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { translations, TranslationKey, TranslationObject } from \"@shared/translations\";\n\ninterface TranslationContextType {\n  currentLanguage: TranslationKey;\n  t: TranslationObject;\n  changeLanguage: (language: TranslationKey) => void;\n}\n\nconst TranslationContext = createContext<TranslationContextType | undefined>(undefined);\n\ninterface TranslationProviderProps {\n  children: ReactNode;\n}\n\nexport function TranslationProvider({ children }: TranslationProviderProps) {\n  const [currentLanguage, setCurrentLanguage] = useState<TranslationKey>(() => {\n    const saved = localStorage.getItem(\"preferredLanguage\") as TranslationKey;\n    return (saved === \"en\" || saved === \"hi\") ? saved : \"en\";\n  });\n\n  const changeLanguage = (language: TranslationKey) => {\n    setCurrentLanguage(language);\n    localStorage.setItem(\"preferredLanguage\", language);\n    \n    // Update font family based on language\n    if (language === 'hi') {\n      document.documentElement.style.setProperty('--font-sans', \"'Noto Sans Devanagari', Inter, sans-serif\");\n    } else {\n      document.documentElement.style.setProperty('--font-sans', \"Inter, 'Noto Sans Devanagari', sans-serif\");\n    }\n  };\n\n  useEffect(() => {\n    // Apply font on initial load based on current language\n    if (currentLanguage === 'hi') {\n      document.documentElement.style.setProperty('--font-sans', \"'Noto Sans Devanagari', Inter, sans-serif\");\n    } else {\n      document.documentElement.style.setProperty('--font-sans', \"Inter, 'Noto Sans Devanagari', sans-serif\");\n    }\n  }, []);\n\n  const value = {\n    currentLanguage,\n    t: translations[currentLanguage],\n    changeLanguage\n  };\n\n  return (\n    <TranslationContext.Provider value={value}>\n      {children}\n    </TranslationContext.Provider>\n  );\n}\n\nexport function useTranslation() {\n  const context = useContext(TranslationContext);\n  if (!context) {\n    throw new Error(\"useTranslation must be used within a TranslationProvider\");\n  }\n  return context;\n}","size_bytes":2048}},"version":1}